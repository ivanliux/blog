<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ncnom&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-27T05:46:07.542Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ncmon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Jetpack Architecture之ViewModel</title>
    <link href="http://yoursite.com/post/Jetpack-Architecture-ViewModel/"/>
    <id>http://yoursite.com/post/Jetpack-Architecture-ViewModel/</id>
    <published>2018-09-26T12:40:11.000Z</published>
    <updated>2018-10-27T05:46:07.542Z</updated>
    
    <content type="html"><![CDATA[<p><br>&ensp;&ensp;Jetpack已经出了很久很久了，近几年的GDD几乎每次都会介绍新的组件，说来惭愧，一直没有好好学习，看近年的Google 的很多Demo中其实都有所体现，之前都是大概的了解了一遍。最近决定，好好梳理一遍，既学习其用法，也尝试学习下其设计思想。也是时候该补充一下了。进入正题–ViewModel<br><br>&ensp;&ensp;首先都是看官方的例子，<a href="https://developer.android.google.cn/topic/libraries/architecture/viewmodel" title="Jetpack-ViewModel" target="_blank" rel="external">ViewModel</a>官方的的例子是会和另一个架构库LiveData写在一起，很多的博客也是照官方的例子来说明，开始接触时甚至给了我一种假象：ViewModel都是和LiveData一起使用的。后来阅读才了解，ViewModel和LiveData职责分工还是很明显的，使用LiveData Demo主要使用其observe功能，LiveDate的使用及原理之后再分析，甚至在appcompat-v7:27.1.1中直接单独集成了ViewModel.所以，故为排除干扰，今天不会使用官方的主流Demo用法，先来看ViewModel。<br><a id="more"></a><br><br>&ensp;&ensp;Android的UI控制器（Activity和Fragment）从创建到销毁拥有自己完整的生命周期，当系统配置发生改变时（(Configuration changes)），系统就会销毁Activity和与之关联的Fragment然后再次重建<font color="#FFA500">（可通过在AndroidManifast.xml中配置android:configChanges修改某些行为，这里不讨论）</font>,那么存储在当前UI中的临时数据也会被清空，例如，登陆输入框，输入账号或密码后旋转屏幕，视图被重建，输入过的数据也清空了，这无疑是一种不友好的用户体验。对于少量的可序列化数据可以使用onSaveInstanceState()方法保存然后在onCreate()方法中重新恢复，正如所说onSaveInstanceState对于大量的数据缓存有一定的局限性，大量的数据缓存则可以使用<a href="https://developer.android.com/reference/android/support/v4/app/Fragment" title="Fragment-reference" target="_blank" rel="external">Fragment</a>.setRetainInstance(true)来保存数据。ViewModel也是提供了相同的功能，用来存储和管理与UI相关的数据，允许数据在系统配置变化后存活，我们一起看一下这个ViewModel的缓存是怎么实现的呢？<br><br>首先先看下使用方式，先上效果图<br><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/device-2018-09-27-224647_20180927224809.gif" width="300" div="" align="center"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</div><div class="line">   String name;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCleared</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCleared();</div><div class="line">    name = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>&nbsp;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ViewModelActivity"</span>;</div><div class="line">    TextView textView;</div><div class="line">    <span class="keyword">private</span> MyViewModel myViewModel;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_viewmodel);</div><div class="line">        textView = findViewById(R.id.textView);</div><div class="line">        textView.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        ViewModelProvider.Factory factory = ViewModelProvider.AndroidViewModelFactory.getInstance(getApplication());</div><div class="line"><span class="comment">/*</span></div><div class="line">*这里的this是ViewModelStoreOwner接口在appcompat-v7:27.1.1支持库中AppCompatActivity已经实现了，</div><div class="line">*如果是较低版本，需要更新支持包或者参考其实现对本来继承的Activity做对应实现。</div><div class="line">*/</div><div class="line">        ViewModelProvider provider = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>, factory);<span class="comment">//</span></div><div class="line">        myViewModel = provider.get(MyViewModel.class);</div><div class="line">        Log.e(TAG, <span class="string">"onCreate: "</span> + myViewModel.getName() );</div><div class="line">        <span class="keyword">if</span> (myViewModel.getName() != <span class="keyword">null</span>) &#123;</div><div class="line">            textView.setText(myViewModel.getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.textView:</div><div class="line">                myViewModel.setName(<span class="string">"MyViewModel Test"</span>);</div><div class="line">                textView.setText(myViewModel.getName());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"default"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure></p><p>非常简单的一个例子，这就是ViewModel最简单的使用了，就是TextView中显示ViewModel的数据。ViewModel需要由ViewModelProvider.get(Class<t>)来取得，旋转屏幕销毁后，之前改变的数据还在。<br>接下来就是进入主题分析下ViewModel到底是怎么实现的呢？<br>带着问题看源码：  </t></p><ul><li>ViewModelProvider是干啥的？</li><li>AndroidViewModelFactory 这命名一看就是应该是工厂模式，工厂创建了什么？</li><li>provider.get(MyViewModel.class) 这里直接使用的get命名就得到了需要的唯一数据</li><li>注释中ViewModelStoreOwner又是什么角色？<br>先看ViewModel类，没什么说的，就是一个么有任何真正实现的抽象类，只有一个抽象方法onCleared()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModel</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This method will be called when this ViewModel is no longer used and will be destroyed.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * It is useful when ViewModel observes some data and you need to clear this subscription to</div><div class="line">     * prevent a leak of this ViewModel.</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCleared</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接着看下ViewModelFactory，顾名思义就是制造ViewModel的。<br>AndroidViewModelFactory的继承关系如下:</p><blockquote><p>android.arch.lifecycle.ViewModelProvider.Factory</p><blockquote><p>android.arch.lifecycle.ViewModelProvider.NewInstanceFactory</p><blockquote><p>android.arch.lifecycle.ViewModelProvider.AndroidViewModelFactory</p></blockquote></blockquote></blockquote><p>Factory是一个只包含一个create的interface，NewInstanceFactory实现了该方法传入Class<t>会利用ViewModel的默认无参构造器创建一个对应ViewModel的实例，而AndroidViewModelFactory增加了一个属性就是应用的Applicaion,同时重写create方法，查看ViewModel是否有包含Applicaion参数的构造方法从而使用，对应的其实还有一个AndroidViewModel是ViewModel的子类，默认已经实现了带有Application参数的构造方法，需要使用在ViewModel中使用application的直接继承AndroidViewModel就可以，看到这里其实最上面的例子有个不是问题的问题，其实上面的Factory直接使用NewInstanceFactory就可以创建出对应的ViewModel实例了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Implementations of &#123;<span class="doctag">@code</span> Factory&#125; interface are responsible to instantiate ViewModels.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates a new instance of the given &#123;<span class="doctag">@code</span> Class&#125;.</div><div class="line">     * &lt;p&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> modelClass a &#123;<span class="doctag">@code</span> Class&#125; whose instance is requested</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;        The type parameter for the ViewModel.</div><div class="line">     * <span class="doctag">@return</span> a newly created ViewModel</div><div class="line">     */</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    &lt;T extends ViewModel&gt; <span class="function">T <span class="title">create</span><span class="params">(@NonNull Class&lt;T&gt; modelClass)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Simple factory, which calls empty constructor on the give class.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NewInstanceFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"ClassNewInstance"</span>)</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">create</span><span class="params">(@NonNull Class&lt;T&gt; modelClass)</span> </span>&#123;</div><div class="line">        <span class="comment">//noinspection TryWithIdenticalCatches</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> modelClass.newInstance();</div><div class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot create an instance of "</span> + modelClass, e);</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot create an instance of "</span> + modelClass, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * &#123;<span class="doctag">@link</span> Factory&#125; which may create &#123;<span class="doctag">@link</span> AndroidViewModel&#125; and</div><div class="line"> * &#123;<span class="doctag">@link</span> ViewModel&#125;, which have an empty constructor.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidViewModelFactory</span> <span class="keyword">extends</span> <span class="title">ViewModelProvider</span>.<span class="title">NewInstanceFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AndroidViewModelFactory sInstance;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Retrieve a singleton instance of AndroidViewModelFactory.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> application an application to pass in &#123;<span class="doctag">@link</span> AndroidViewModel&#125;</div><div class="line">     * <span class="doctag">@return</span> A valid &#123;<span class="doctag">@link</span> AndroidViewModelFactory&#125;</div><div class="line">     */</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AndroidViewModelFactory <span class="title">getInstance</span><span class="params">(@NonNull Application application)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            sInstance = <span class="keyword">new</span> AndroidViewModelFactory(application);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Application mApplication;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates a &#123;<span class="doctag">@code</span> AndroidViewModelFactory&#125;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> application an application to pass in &#123;<span class="doctag">@link</span> AndroidViewModel&#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AndroidViewModelFactory</span><span class="params">(@NonNull Application application)</span> </span>&#123;</div><div class="line">        mApplication = application;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">create</span><span class="params">(@NonNull Class&lt;T&gt; modelClass)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (AndroidViewModel.class.isAssignableFrom(modelClass)) &#123;</div><div class="line">            <span class="comment">//noinspection TryWithIdenticalCatches</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> modelClass.getConstructor(Application.class).newInstance(mApplication);</div><div class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot create an instance of "</span> + modelClass, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot create an instance of "</span> + modelClass, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot create an instance of "</span> + modelClass, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot create an instance of "</span> + modelClass, e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.create(modelClass);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>之后通过ViewModelStoreOwner和刚刚创建的Factory创建出ViewModelPrivider实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Creates &#123;<span class="doctag">@code</span> ViewModelProvider&#125;, which will create &#123;<span class="doctag">@code</span> ViewModels&#125; via the given</div><div class="line"> * &#123;<span class="doctag">@code</span> Factory&#125; and retain them in a store of the given &#123;<span class="doctag">@code</span> ViewModelStoreOwner&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> owner   a &#123;<span class="doctag">@code</span> ViewModelStoreOwner&#125; whose &#123;<span class="doctag">@link</span> ViewModelStore&#125; will be used to</div><div class="line"> *                retain &#123;<span class="doctag">@code</span> ViewModels&#125;</div><div class="line"> * <span class="doctag">@param</span> factory a &#123;<span class="doctag">@code</span> Factory&#125; which will be used to instantiate</div><div class="line"> *                new &#123;<span class="doctag">@code</span> ViewModels&#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewModelProvider</span><span class="params">(@NonNull ViewModelStoreOwner owner, @NonNull Factory factory)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(owner.getViewModelStore(), factory);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Creates &#123;<span class="doctag">@code</span> ViewModelProvider&#125;, which will create &#123;<span class="doctag">@code</span> ViewModels&#125; via the given</div><div class="line"> * &#123;<span class="doctag">@code</span> Factory&#125; and retain them in the given &#123;<span class="doctag">@code</span> store&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> store   &#123;<span class="doctag">@code</span> ViewModelStore&#125; where ViewModels will be stored.</div><div class="line"> * <span class="doctag">@param</span> factory factory a &#123;<span class="doctag">@code</span> Factory&#125; which will be used to instantiate</div><div class="line"> *                new &#123;<span class="doctag">@code</span> ViewModels&#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewModelProvider</span><span class="params">(@NonNull ViewModelStore store, @NonNull Factory factory)</span> </span>&#123;</div><div class="line">    mFactory = factory;</div><div class="line">    <span class="keyword">this</span>.mViewModelStore = store;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * A scope that owns &#123;<span class="doctag">@link</span> ViewModelStore&#125;.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * A responsibility of an implementation of this interface is to retain owned ViewModelStore</div><div class="line"> * during the configuration changes and call &#123;<span class="doctag">@link</span> ViewModelStore#clear()&#125;, when this scope is</div><div class="line"> * going to be destroyed.</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewModelStoreOwner</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns owned &#123;<span class="doctag">@link</span> ViewModelStore&#125;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> a &#123;<span class="doctag">@code</span> ViewModelStore&#125;</div><div class="line">     */</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="function">ViewModelStore <span class="title">getViewModelStore</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ViewModelStoreOwner 也是一个接口是FragmentActivity实现了该接口并实现了其中的getViewModelStore()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentActivity</span> <span class="keyword">extends</span> <span class="title">BaseFragmentActivityApi16</span> <span class="keyword">implements</span></span></div><div class="line">        <span class="title">ViewModelStoreOwner</span>...&#123;</div><div class="line">    <span class="keyword">private</span> ViewModelStore mViewModelStore;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        mFragments.attachHost(<span class="keyword">null</span> <span class="comment">/*parent*/</span>);</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        NonConfigurationInstances nc =</div><div class="line">                (NonConfigurationInstances) getLastNonConfigurationInstance();</div><div class="line">        <span class="keyword">if</span> (nc != <span class="keyword">null</span>) &#123;</div><div class="line">            mViewModelStore = nc.viewModelStore;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the &#123;<span class="doctag">@link</span> ViewModelStore&#125; associated with this activity</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> a &#123;<span class="doctag">@code</span> ViewModelStore&#125;</div><div class="line">     */</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewModelStore <span class="title">getViewModelStore</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getApplication() == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Your activity is not yet attached to the "</span></div><div class="line">                    + <span class="string">"Application instance. You can't request ViewModel before onCreate call."</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mViewModelStore == <span class="keyword">null</span>) &#123;</div><div class="line">            mViewModelStore = <span class="keyword">new</span> ViewModelStore();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mViewModelStore;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这个ViewModelStore又是什么呢，其实就是真正利用HashMap存储ViewModel的地方了，看下代码在存储和clear同时会调用ViewModel需要实现的抽象方法onClear()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelStore</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, ViewModel viewModel)</span> </span>&#123;</div><div class="line">        ViewModel oldViewModel = mMap.put(key, viewModel);</div><div class="line">        <span class="keyword">if</span> (oldViewModel != <span class="keyword">null</span>) &#123;</div><div class="line">            oldViewModel.onCleared();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> ViewModel <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mMap.get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  Clears internal storage and notifies ViewModels that they are no longer used.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (ViewModel vm : mMap.values()) &#123;</div><div class="line">            vm.onCleared();</div><div class="line">        &#125;</div><div class="line">        mMap.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样ViewModelProvider就是有了一个ViewModel的容器，这时去调用ViewModelProvider的get(Class<t>)方法就是去调用mViewModelStore<br>的get()方法取出对应的ViewModel所以这里只要持有的ViewModelStore是有缓存的，那么取出的ViewModel就是相同的缓存了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns an existing ViewModel or creates a new one in the scope (usually, a fragment or</div><div class="line"> * an activity), associated with this &#123;<span class="doctag">@code</span> ViewModelProvider&#125;.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * The created ViewModel is associated with the given scope and will be retained</div><div class="line"> * as long as the scope is alive (e.g. if it is an activity, until it is</div><div class="line"> * finished or process is killed).</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> modelClass The class of the ViewModel to create an instance of it if it is not</div><div class="line"> *                   present.</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt;        The type parameter for the ViewModel.</div><div class="line"> * <span class="doctag">@return</span> A ViewModel that is an instance of the given type &#123;<span class="doctag">@code</span> T&#125;.</div><div class="line"> */</div><div class="line"><span class="meta">@NonNull</span></div><div class="line"><span class="meta">@MainThread</span></div><div class="line"><span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">get</span><span class="params">(@NonNull Class&lt;T&gt; modelClass)</span> </span>&#123;</div><div class="line">    String canonicalName = modelClass.getCanonicalName();</div><div class="line">    <span class="keyword">if</span> (canonicalName == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Local and anonymous classes can not be ViewModels"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> get(DEFAULT_KEY + <span class="string">":"</span> + canonicalName, modelClass);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@NonNull</span></div><div class="line"><span class="meta">@MainThread</span></div><div class="line"><span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">get</span><span class="params">(@NonNull String key, @NonNull Class&lt;T&gt; modelClass)</span> </span>&#123;</div><div class="line">    ViewModel viewModel = mViewModelStore.get(key);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (modelClass.isInstance(viewModel)) &#123;</div><div class="line">        <span class="comment">//noinspection unchecked</span></div><div class="line">        <span class="keyword">return</span> (T) viewModel;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//noinspection StatementWithEmptyBody</span></div><div class="line">        <span class="keyword">if</span> (viewModel != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span> log a warning.</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    viewModel = mFactory.create(modelClass);</div><div class="line">    mViewModelStore.put(key, viewModel);</div><div class="line">    <span class="comment">//noinspection unchecked</span></div><div class="line">    <span class="keyword">return</span> (T) viewModel;</div><div class="line">&#125;</div></pre></td></tr></table></figure></t></p><p>看到这里就会发现ViewModelStore的缓存其实是通过NonConfigurationInstances的缓存来实现的，这样就完成了Activity销毁重建后ViewModel还保存原来的数据的过程，那么NonConfigurationInstances 是什么呢？如果有了解过使用在Activity中使用onRetainNonConfigurationInstance()保存缓存数据，在onCreate()中通过getLastNonConfigurationInstance()恢复之前的数据状态的同学可能会很熟悉这里的写法，是的，这里FragmentActivity就是使用的这种方式来保存之前的ViewModelStore,看下FragmentActivity的onRetainNonConfigurationInstance()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Retain all appropriate fragment state.  You can NOT</div><div class="line"> * override this yourself!  Use &#123;<span class="doctag">@link</span> #onRetainCustomNonConfigurationInstance()&#125;</div><div class="line"> * if you want to retain your own state.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">onRetainNonConfigurationInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mStopped) &#123;</div><div class="line">        doReallyStop(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Object custom = onRetainCustomNonConfigurationInstance();</div><div class="line"></div><div class="line">    FragmentManagerNonConfig fragments = mFragments.retainNestedNonConfig();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (fragments == <span class="keyword">null</span> &amp;&amp; mViewModelStore == <span class="keyword">null</span> &amp;&amp; custom == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    NonConfigurationInstances nci = <span class="keyword">new</span> NonConfigurationInstances();</div><div class="line">    nci.custom = custom;</div><div class="line">    nci.viewModelStore = mViewModelStore;<span class="comment">//就是这里了，会把之前的VeiwmodelStroe存储到NonConfigurationInstances中以供后续恢复使用</span></div><div class="line">    nci.fragments = fragments;</div><div class="line">    <span class="keyword">return</span> nci;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里其实再次出现了一个问题  onRetainNonConfigurationInstance()和getLastNonConfigurationInstance()又是怎么恢复数据呢?…这个其实和Activity的启动流程相关，这里也介绍一下吧，之后的内容其实是Activity的内容了，趁这次看ViwModel也跟着看了一遍，有了解过Activity启动流程的同学更容易理解的多，大家酌情观看。</p><p>也不能从头开始说起，再从头就要越扯越远了，就从ActivityThread.java中的scheduleLaunchActivity开始<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleLaunchActivity</span><span class="params">(Intent intent, IBinder token, <span class="keyword">int</span> ident,</span></span></div><div class="line">        ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</div><div class="line">        CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,</div><div class="line">        <span class="keyword">int</span> procState, Bundle state, PersistableBundle persistentState,</div><div class="line">        List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</div><div class="line">        <span class="keyword">boolean</span> notResumed, <span class="keyword">boolean</span> isForward, ProfilerInfo profilerInfo) &#123;</div><div class="line"></div><div class="line">    updateProcessState(procState, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">    ActivityClientRecord r = <span class="keyword">new</span> ActivityClientRecord();</div><div class="line"></div><div class="line">    r.token = token;</div><div class="line">    r.ident = ident;</div><div class="line">    r.intent = intent;</div><div class="line">    r.referrer = referrer;</div><div class="line">    r.voiceInteractor = voiceInteractor;</div><div class="line">    r.activityInfo = info;</div><div class="line">    r.compatInfo = compatInfo;</div><div class="line">    r.state = state;</div><div class="line">    r.persistentState = persistentState;</div><div class="line"></div><div class="line">    r.pendingResults = pendingResults;</div><div class="line">    r.pendingIntents = pendingNewIntents;</div><div class="line"></div><div class="line">    r.startsNotResumed = notResumed;</div><div class="line">    r.isForward = isForward;</div><div class="line"></div><div class="line">    r.profilerInfo = profilerInfo;</div><div class="line"></div><div class="line">    r.overrideConfig = overrideConfig;</div><div class="line">    updatePendingConfiguration(curConfig);</div><div class="line"></div><div class="line">    sendMessage(H.LAUNCH_ACTIVITY, r);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从ActivityThread.java中H（extents Handler）接收到LAUNCH_ACTIVITY，并且会接收ActivityClientRecord，其中会调用ActivityThread的handleLaunchActivity方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ActivityThread.java</span></div><div class="line"><span class="comment">//没有前后文的H中的handleMessage~~~</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">           <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">"&gt;&gt;&gt; handling: "</span> + codeToString(msg.what));</div><div class="line">           <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">               <span class="keyword">case</span> LAUNCH_ACTIVITY: &#123;</div><div class="line">                   Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStart"</span>);</div><div class="line">                   <span class="keyword">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</div><div class="line"><span class="comment">//ActivityClientRecord 是apk进程中一个Activity的代表，这个对象的activity成员引用真正的Activity组件,后面的都和它有关系</span></div><div class="line">                   r.packageInfo = getPackageInfoNoCheck(</div><div class="line">                           r.activityInfo.applicationInfo, r.compatInfo);</div><div class="line">                   handleLaunchActivity(r, <span class="keyword">null</span>, <span class="string">"LAUNCH_ACTIVITY"</span>);<span class="comment">///这里~这里~</span></div><div class="line">                   Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">               &#125; <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent, String reason)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        Activity a = performLaunchActivity(r, customIntent);</div><div class="line"> ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class="line">...</div><div class="line">    <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">            CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</div><div class="line">            Configuration config = <span class="keyword">new</span> Configuration(mCompatConfiguration);</div><div class="line">            <span class="keyword">if</span> (r.overrideConfig != <span class="keyword">null</span>) &#123;</div><div class="line">                config.updateFrom(r.overrideConfig);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG, <span class="string">"Launching activity "</span></div><div class="line">                    + r.activityInfo.name + <span class="string">" with config "</span> + config);</div><div class="line">            Window window = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (r.mPendingRemoveWindow != <span class="keyword">null</span> &amp;&amp; r.mPreserveWindow) &#123;</div><div class="line">                window = r.mPendingRemoveWindow;</div><div class="line">                r.mPendingRemoveWindow = <span class="keyword">null</span>;</div><div class="line">                r.mPendingRemoveWindowManager = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            appContext.setOuterContext(activity);</div><div class="line">            activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</div><div class="line">                    r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class="line">                    r.embeddedID, r.lastNonConfigurationInstances, config, <span class="comment">//看到这个r.lastNonConfigurationInstances 就是在Activity方法中调用getLastNonConfigurationInstance()获取到的Object了。</span></div><div class="line">                    r.referrer, r.voiceInteractor, window, r.configCallback);</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注释中的地方就是lastNonConfigurationInstances的赋值的地方，可能会发现在scheduleLaunchActivity并没有对lastNonConfigurationInstances赋值，因为第一次启动Activity时，这里其实就是null的，那么赋值的地方在哪里呢，既然是销毁后会恢复数据，追踪发现在performDestroyActivity()也就是在调用onDestroy生命周期之前有这样一段代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ActivityClientRecord <span class="title">performDestroyActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> finishing,</span></span></div><div class="line">            <span class="keyword">int</span> configChanges, <span class="keyword">boolean</span> getNonConfigInstance) &#123;</div><div class="line">        ActivityClientRecord r = mActivities.get(token);</div><div class="line">        ...无关代码省略</div><div class="line">            <span class="keyword">if</span> (getNonConfigInstance) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    r.lastNonConfigurationInstances</div><div class="line">                            = r.activity.retainNonConfigurationInstances();<span class="comment">///就是这里出现了想要找的NonConfigurationInstances</span></div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    <span class="keyword">if</span> (!mInstrumentation.onException(r.activity, e)) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                                <span class="string">"Unable to retain activity "</span></div><div class="line">                                + r.intent.getComponent().toShortString()</div><div class="line">                                + <span class="string">": "</span> + e.toString(), e);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                r.activity.mCalled = <span class="keyword">false</span>;</div><div class="line">                mInstrumentation.callActivityOnDestroy(r.activity);</div><div class="line">...无关代码省略</div><div class="line">        <span class="keyword">return</span> r;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>在performDestroyActivity()调用了Activity.retainNonConfigurationInstances()方法了，所以逻辑切换回Activity中…<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * This method is similar to &#123;<span class="doctag">@link</span> #onRetainNonConfigurationInstance()&#125; except that</div><div class="line"> * it should return either a mapping from  child activity id strings to arbitrary objects,</div><div class="line"> * or null.  This method is intended to be used by Activity framework subclasses that control a</div><div class="line"> * set of child activities, such as ActivityGroup.  The same guarantees and restrictions apply</div><div class="line"> * as for &#123;<span class="doctag">@link</span> #onRetainNonConfigurationInstance()&#125;.  The default implementation returns null.</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function">HashMap&lt;String,Object&gt; <span class="title">onRetainNonConfigurationChildInstances</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">NonConfigurationInstances <span class="title">retainNonConfigurationInstances</span><span class="params">()</span> </span>&#123;</div><div class="line">    Object activity = onRetainNonConfigurationInstance();<span class="comment">///熟悉的代码，原来的配方，和分析ActivityThread之前联系起来了，在Activity中是空实现，这里就是获取子类的NonConfigurationInstance()，之前的例子就是的得FragmentActivity中的具体实现，上文中已经在分析ActivityThread.java已经指出。</span></div><div class="line">    HashMap&lt;String, Object&gt; children = onRetainNonConfigurationChildInstances();</div><div class="line">    FragmentManagerNonConfig fragments = mFragments.retainNestedNonConfig();</div><div class="line"></div><div class="line">    <span class="comment">// We're already stopped but we've been asked to retain.</span></div><div class="line">    <span class="comment">// Our fragments are taken care of but we need to mark the loaders for retention.</span></div><div class="line">    <span class="comment">// In order to do this correctly we need to restart the loaders first before</span></div><div class="line">    <span class="comment">// handing them off to the next activity.</span></div><div class="line">    mFragments.doLoaderStart();</div><div class="line">    mFragments.doLoaderStop(<span class="keyword">true</span>);</div><div class="line">    ArrayMap&lt;String, LoaderManager&gt; loaders = mFragments.retainLoaderNonConfig();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (activity == <span class="keyword">null</span> &amp;&amp; children == <span class="keyword">null</span> &amp;&amp; fragments == <span class="keyword">null</span> &amp;&amp; loaders == <span class="keyword">null</span></div><div class="line">            &amp;&amp; mVoiceInteractor == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    NonConfigurationInstances nci = <span class="keyword">new</span> NonConfigurationInstances();</div><div class="line">    nci.activity = activity;</div><div class="line">    nci.children = children;</div><div class="line">    nci.fragments = fragments;</div><div class="line">    nci.loaders = loaders;</div><div class="line">    <span class="keyword">if</span> (mVoiceInteractor != <span class="keyword">null</span>) &#123;</div><div class="line">        mVoiceInteractor.retainInstance();</div><div class="line">        nci.voiceInteractor = mVoiceInteractor;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> nci;<span class="comment">//这里返回的是Activity中的NonConfigurationInstances就保存在了ActivityClientRecord中了</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>至此，ActivityClientRecord就不再深入了，可以看到在Activity中是以一个ArrayMap来保存Activity的记录，记录的就是Activity的状态，所以这里就实现了对NonConfigurationInstances的保存。</p><hr><p><strong>结语：至此就基本看完了ViewModel在Activity中的使用和原理，在Fragment中的实现主要是使用setRetainInstance(true)的方式去保存，跟今天的分析也有关联，分析源码的过程总是看着就有新的问题，再次带着问题去解决会再次有不同的收获，本文的理解也可能有偏差，如有错误和想要交流的也欢迎指正沟通。</strong>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&amp;ensp;&amp;ensp;Jetpack已经出了很久很久了，近几年的GDD几乎每次都会介绍新的组件，说来惭愧，一直没有好好学习，看近年的Google 的很多Demo中其实都有所体现，之前都是大概的了解了一遍。最近决定，好好梳理一遍，既学习其用法，也尝试学习下其设计思想。也是时候该补充一下了。进入正题–ViewModel&lt;br&gt;&lt;br&gt;&amp;ensp;&amp;ensp;首先都是看官方的例子，&lt;a href=&quot;https://developer.android.google.cn/topic/libraries/architecture/viewmodel&quot; title=&quot;Jetpack-ViewModel&quot;&gt;ViewModel&lt;/a&gt;官方的的例子是会和另一个架构库LiveData写在一起，很多的博客也是照官方的例子来说明，开始接触时甚至给了我一种假象：ViewModel都是和LiveData一起使用的。后来阅读才了解，ViewModel和LiveData职责分工还是很明显的，使用LiveData Demo主要使用其observe功能，LiveDate的使用及原理之后再分析，甚至在appcompat-v7:27.1.1中直接单独集成了ViewModel.所以，故为排除干扰，今天不会使用官方的主流Demo用法，先来看ViewModel。&lt;br&gt;
    
    </summary>
    
      <category term="技术栈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Jetpack" scheme="http://yoursite.com/tags/Jetpack/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu搭建Nginx图片服务器</title>
    <link href="http://yoursite.com/post/build-an-image-server/"/>
    <id>http://yoursite.com/post/build-an-image-server/</id>
    <published>2018-01-11T12:40:11.000Z</published>
    <updated>2018-10-26T14:54:02.067Z</updated>
    
    <content type="html"><![CDATA[<p>也许算作是建站以来的第一篇真正意义上的总结博客。  </p><p>首先感谢开源本主题的viosey同学和辛苦维护本主题的neoFelhz同学，对此主题极为喜欢。</p><p>新发现了当前的这个Meterial主题后发现居然有一个Gallery模板可以展示照片，平时的博客使用图片需要存放在一个位置上，平时也有一些业余的摄影爱好需要刚好可以存放，当然可以使用如之前使用过的七牛云等云对象存储平台存储使用，我这里也是刚好有个云服务器可以做存储就想着自己搭建一个图片服务器方便管理，也刚好能学习一下服务器方面的一些知识，经多次尝试，故总结一下,话不多说，开始行动.</p><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>Ubuntu版本Ubuntu 16.04.3</p><h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><p>首先是准备编译Nginx的前期准备工作  </p><h2 id="先更新一下源"><a href="#先更新一下源" class="headerlink" title="先更新一下源"></a>先更新一下源</h2><pre><code>&gt; apt-get update</code></pre><h2 id="安装gcc-g-依赖库"><a href="#安装gcc-g-依赖库" class="headerlink" title="安装gcc g++依赖库"></a>安装gcc g++依赖库</h2><pre><code>&gt; apt-get install build-essential&gt; apt-get install libtool</code></pre><h2 id="安装prce依赖库"><a href="#安装prce依赖库" class="headerlink" title="安装prce依赖库"></a>安装prce依赖库</h2><pre><code>&gt; apt-get install libpcre3 libpcre3-dev</code></pre><h2 id="安装-zlib依赖库"><a href="#安装-zlib依赖库" class="headerlink" title="安装 zlib依赖库"></a>安装 zlib依赖库</h2><pre><code>&gt; apt-get install zlib1g-dev</code></pre><h2 id="安装-ssl依赖库"><a href="#安装-ssl依赖库" class="headerlink" title="安装 ssl依赖库"></a>安装 ssl依赖库</h2><pre><code>&gt; apt-get install openssl</code></pre><h2 id="编译Nginx"><a href="#编译Nginx" class="headerlink" title="编译Nginx"></a>编译Nginx</h2><p>下载<a href="http://nginx.org/en/download.html" target="_blank" rel="external">Nginx</a>有对应的版本，我这里下载是当前的最新版本1.13.8</p><pre><code>&gt; #解压下载下来的压缩包&gt; tar -zxvf nginx-1.13.8.tar.gz&gt; #进入解压目录&gt; cd nginx-1.13.8&gt; #配置并生成makefile&gt; ./configure --prefix=/usr/local/nginx &gt; #编译&gt; make&gt; #安装&gt; make install&gt; #启动Nginx&gt; /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code></pre><p>此时Nginx就安装完成了，会使用默认的80端口启动，如果有启动apache2服务的这里会用冲突，这里不是重点，可查询解决，启动完成可直接通过服务器ip或者云解析的域名查看默认网页  </p><p>默认的网页长这个样子<br><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image6.png" alt="Nginx-default-index"></p><h1 id="安装与配置vsftpd"><a href="#安装与配置vsftpd" class="headerlink" title="安装与配置vsftpd"></a>安装与配置vsftpd</h1><h2 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h2><pre><code>&gt; apt-get install vsftpd</code></pre><h2 id="启动vsftpd服务"><a href="#启动vsftpd服务" class="headerlink" title="启动vsftpd服务"></a>启动vsftpd服务</h2><pre><code>&gt;service vsftpd start</code></pre><h2 id="新建ftpuser目录作为ftp主目录-（ftpuser为目录名，随个人喜好创建）"><a href="#新建ftpuser目录作为ftp主目录-（ftpuser为目录名，随个人喜好创建）" class="headerlink" title="新建ftpuser目录作为ftp主目录 （ftpuser为目录名，随个人喜好创建）"></a>新建ftpuser目录作为ftp主目录 （ftpuser为目录名，随个人喜好创建）</h2><pre><code>&gt;mkdir /home/ftpuser</code></pre><h2 id="新建ftpuser用户指定用户主目录和设置用户密码-（ftpuser为用户名，随个人喜好创建）"><a href="#新建ftpuser用户指定用户主目录和设置用户密码-（ftpuser为用户名，随个人喜好创建）" class="headerlink" title="新建ftpuser用户指定用户主目录和设置用户密码 （ftpuser为用户名，随个人喜好创建）"></a>新建ftpuser用户指定用户主目录和设置用户密码 （ftpuser为用户名，随个人喜好创建）</h2><pre><code>&gt;useradd -d /home/ftpuser -s /bin/bash ftpuser&gt;passwd ftpuser</code></pre><h2 id="制定用户组"><a href="#制定用户组" class="headerlink" title="制定用户组"></a>制定用户组</h2><pre><code>&gt;chown ftpuser:ftpuser /home/ftpuser</code></pre><h2 id="新建文件-etc-vsftpd-user-list，用于存放允许访问ftp的用户"><a href="#新建文件-etc-vsftpd-user-list，用于存放允许访问ftp的用户" class="headerlink" title="新建文件/etc/vsftpd.user_list，用于存放允许访问ftp的用户"></a>新建文件/etc/vsftpd.user_list，用于存放允许访问ftp的用户</h2><pre><code>&gt;vim /etc/vsftpd.user_list</code></pre><div class="article-img"><p><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image7.png" alt="ftp-user_list"></p></div><h2 id="编辑vsftpd配置文件"><a href="#编辑vsftpd配置文件" class="headerlink" title="编辑vsftpd配置文件"></a>编辑vsftpd配置文件</h2><pre><code>&gt;vim /etc/vsftpd.conf做如下修改：   　　打开注释 write_enable=YES   　　添加信息 userlist_file=/etc/vsftpd.user_list   　　添加信息 userlist_enable=YES   　　添加信息 userlist_deny=NO 　　修改完成后保存退出。</code></pre><h2 id="重启vsftpd服务"><a href="#重启vsftpd服务" class="headerlink" title="重启vsftpd服务"></a>重启vsftpd服务</h2><pre><code>&gt;service vsftpd restart</code></pre><p>这是可以使用filezilla等ftp软件使用刚刚新建的用户名和密码访问测试是否成功</p><p>OK，准备工作完成开始上传图片，开始正式图片服务器工作</p><h2 id="创建存储图片的根目录-（在ftpuser目录下-我这里使用www-images）"><a href="#创建存储图片的根目录-（在ftpuser目录下-我这里使用www-images）" class="headerlink" title="创建存储图片的根目录 （在ftpuser目录下,我这里使用www/images）"></a>创建存储图片的根目录 （在ftpuser目录下,我这里使用www/images）</h2><pre><code>&gt;cd /home/ftpuser&gt;mkdir -p www/images</code></pre><h2 id="在nginx目录下创建images目录"><a href="#在nginx目录下创建images目录" class="headerlink" title="在nginx目录下创建images目录"></a>在nginx目录下创建images目录</h2><pre><code>&gt;mkdir /usr/local/nginx/html/images</code></pre><h2 id="修改nginx-conf-nginx-conf在默认的server里再添加一个location并指定实际路径"><a href="#修改nginx-conf-nginx-conf在默认的server里再添加一个location并指定实际路径" class="headerlink" title="修改nginx/conf/nginx.conf在默认的server里再添加一个location并指定实际路径:"></a>修改nginx/conf/nginx.conf在默认的server里再添加一个location并指定实际路径:</h2><pre><code>location /images/ {    root  /home/ftpuser/www/;    autoindex on;}  </code></pre><div class="article-img"><p><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image8.png" alt="images_nginx_conf"></p></div><h2 id="修改用户访问权限"><a href="#修改用户访问权限" class="headerlink" title="修改用户访问权限"></a>修改用户访问权限</h2><pre><code>&gt;chmod 755 /home/ftpuser/www/images</code></pre><p>使用filezilla 等ftp工具使用ftpuser用户登录即可上传图片</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image9.png" alt="ftp_upload_test"><br>送上一张最近的长安街慢门效果照片<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em>。大功告成！ 撒花！<br><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image10.png" alt="image_test_result"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;也许算作是建站以来的第一篇真正意义上的总结博客。  &lt;/p&gt;
&lt;p&gt;首先感谢开源本主题的viosey同学和辛苦维护本主题的neoFelhz同学，对此主题极为喜欢。&lt;/p&gt;
&lt;p&gt;新发现了当前的这个Meterial主题后发现居然有一个Gallery模板可以展示照片，平时的博客使用图片需要存放在一个位置上，平时也有一些业余的摄影爱好需要刚好可以存放，当然可以使用如之前使用过的七牛云等云对象存储平台存储使用，我这里也是刚好有个云服务器可以做存储就想着自己搭建一个图片服务器方便管理，也刚好能学习一下服务器方面的一些知识，经多次尝试，故总结一下,话不多说，开始行动.&lt;/p&gt;
    
    </summary>
    
      <category term="技术栈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="FTP" scheme="http://yoursite.com/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio import project 出现Error错误 程序包org.apache.http不存在</title>
    <link href="http://yoursite.com/post/Android-Studio-Error-2/"/>
    <id>http://yoursite.com/post/Android-Studio-Error-2/</id>
    <published>2018-01-07T15:01:52.000Z</published>
    <updated>2018-10-26T14:53:31.743Z</updated>
    
    <content type="html"><![CDATA[<p>遇到新的产品形态、样式需求我们经常会在Github搜索开源项目，有些项目是早期Android版本中开发而成，后续Google会有部分API在新版本中的SDK放弃集成，这次我导入一个项目时就遇到这样一个错误</p><div class="article-img"><p><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image4.png" alt="Error Imag"></p></div><p>如果经历过Android 4.4 时期的同学应该会觉得org.apache.http这个包很熟悉，这里显示错误是因为在targetsdk：23以上版本SDK中已经不再集成此包，如需使用可添加useLibrary “org.apache.http.legacy”依赖即可 。</p><pre><code>apply plugin: &apos;com.android.application&apos;android {    compileSdkVersion 23    buildToolsVersion &quot;23.0.3&quot;    useLibrary &quot;org.apache.http.legacy&quot;    ...}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;遇到新的产品形态、样式需求我们经常会在Github搜索开源项目，有些项目是早期Android版本中开发而成，后续Google会有部分API在新版本中的SDK放弃集成，这次我导入一个项目时就遇到这样一个错误&lt;/p&gt;
&lt;div class=&quot;article-img&quot;&gt;&lt;p&gt;&lt;i
      
    
    </summary>
    
      <category term="错误志" scheme="http://yoursite.com/categories/%E9%94%99%E8%AF%AF%E5%BF%97/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="IDEError" scheme="http://yoursite.com/tags/IDEError/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView排雷--notifyItemRemoved下标（position）不能更新</title>
    <link href="http://yoursite.com/post/RecyclerView-clear-of-mines-1/"/>
    <id>http://yoursite.com/post/RecyclerView-clear-of-mines-1/</id>
    <published>2017-10-29T15:48:52.000Z</published>
    <updated>2018-01-07T15:35:18.958Z</updated>
    
    <content type="html"><![CDATA[<p>用以显示列表类型的UI我们经常使用ListView，GridView，Google推出RecyclerView之后，大部分的使用均转换到了RecyclerView中，可定制化十分强，但是使用过程中难免碰到一些问题，之前使用ListView多是使用notifyDataSetChanged（）更新数据，使用RecyclerView删除时，为了使用其自身的删除过度动画使用notifyItemRemoved删除，那么就碰到了一个问题，再onBindViewHolder中设置了setTag（position）</p><pre><code>@Overridepublic void onBindViewHolder(RecyclerView.ViewHolder holder,int position){    //...    holder.itemView.setTag(position)    //...}</code></pre><p>直接使用notifyItemRemoved(posiaon)删除会导致该下标不能更新就导致一系列的Bug（/衰）查询到了解决办法特此记录一下:为了修复该问题删除之后需要调用notifyItenRangeChanged方法，使下面的itemview重新onBind:</p><pre><code>public void deleteItem(int position){    mDataList.remove(position);    notifyItemRemoved(position);    if(position != mDataList.size()){ // 如果移除的是最后一个，忽略        notifyItemRangeChanged(position, mDataList.size() - position);    }}</code></pre><p>如果不需要使用动画或更改自定义的动画效果可以添加一下代码</p><pre><code>mRecyclerView.setItemAnimator(newDefaultItemAnimator());</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用以显示列表类型的UI我们经常使用ListView，GridView，Google推出RecyclerView之后，大部分的使用均转换到了RecyclerView中，可定制化十分强，但是使用过程中难免碰到一些问题，之前使用ListView多是使用notifyDataSetC
      
    
    </summary>
    
      <category term="技术栈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Android Studio 更新后出现Error:No service of type Factory  available in ProjectScopeServices.解决办法</title>
    <link href="http://yoursite.com/post/Android-Studio-Error-1/"/>
    <id>http://yoursite.com/post/Android-Studio-Error-1/</id>
    <published>2017-03-15T17:01:52.000Z</published>
    <updated>2018-10-26T14:53:16.357Z</updated>
    
    <content type="html"><![CDATA[<p>今天更新Android Studio后 之前能运行的项目出现错误:<br><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image1.png" alt="enter image description here"></p><p>查找到解决方案在此记录<br>是github的 自动化打包插件maven 版本需要更新导致</p><div class="article-img"><p><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image2.png" alt="enter image description here"></p></div><div class="article-img"><p><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image3.png" alt="enter image description here"></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天更新Android Studio后 之前能运行的项目出现错误:&lt;br&gt;&lt;img src=&quot;https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image1.png&quot; alt=&quot;enter image description he
      
    
    </summary>
    
      <category term="错误志" scheme="http://yoursite.com/categories/%E9%94%99%E8%AF%AF%E5%BF%97/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="IDEError" scheme="http://yoursite.com/tags/IDEError/"/>
    
  </entry>
  
</feed>
