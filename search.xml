<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Android WebView必知必会(3)-WebChromeClient</title>
      <link href="/post/webview-learning-WebChromeClient/"/>
      <url>/post/webview-learning-WebChromeClient/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>😀WebChromeClient：当影响”浏览器”的事件到来时，就会通过WebChromeClient中的方法回调通知用法,所以WebChromeClient都是和我们平时使用浏览器需要的一些交互有密切的联系。</p><a id="more"></a><h2 id="1、获取网页的加载进度"><a href="#1、获取网页的加载进度" class="headerlink" title="1、获取网页的加载进度"></a>1、获取网页的加载进度</h2><ul><li><p>void  onProgressChanged(WebView view, int newProgress)  ；</p><p>Tell the host application the current progress of loading a page. </p><p>newProgress: Current page loading progress, represented by an integer between 0 and 100.</p><p>大家一定要注意，底层实现时，是利用handler来定时轮循当前进度的，每隔一定时间查询一次，所以每次拿到的进度数据是不一样的。也就是说如果页面较简单，可能会直接返回100，而跳过中间的各个数据。也就是说，除了100，其它任何一个数值不是一定返回的。所以大家如果要用到进度，除了数值100可以用等号来判断，其它一定要用大于号或小于号，如果用了等号，可能永远也不会执行到。</p></li></ul><h2 id="2、获取网页中的基本信息"><a href="#2、获取网页中的基本信息" class="headerlink" title="2、获取网页中的基本信息"></a>2、获取网页中的基本信息</h2><ul><li><p>void  onReceivedIcon(WebView view, Bitmap icon) </p><p>icon A Bitmap containing the favicon for the current page.网页中首部图标</p></li><li><p>void  onReceivedTitle(WebView view, String title) </p><p>title: A String containing the new title of the document. 网页中标题中的更改，首部标题</p><p>获取标题的时间主要取决于网页前端设置标题的位置，JS中的函数设置也在这里接收</p></li><li><p>void  onReceivedTouchIconUrl(WebView view, String url, boolean precomposed)  Notify the host application of the url for an apple-touch-icon(苹果图标). </p></li><li><p>苹果为iOS设备配备了apple-touch-icon私有属性，添加该属性，在iPhone,iPad,iTouch的safari浏览器上可以使用添加到主屏按钮将网站添加到主屏幕上，方便用户以后访问。apple-touch-icon 标签支持sizes属性，可以用来放置对应不同的设备。</p><p>url: The icon url.图片地址</p><p>precomposed: True if the url is for a precomposed touch icon. 标记为True的话使用原图</p></li></ul><h2 id="3、拦截网页中JS控制台消息"><a href="#3、拦截网页中JS控制台消息" class="headerlink" title="3、拦截网页中JS控制台消息"></a>3、拦截网页中JS控制台消息</h2><p>当html中调用console相关输出的时候，就会通过onConsoleMessage进行通知</p><p>和alert,prompt,confirm不同，我们不需要强制设置WebChromeClient（但是仍需要setJavaScriptEnabled为true），当点击log按钮时，也会调用console相应的函数把日志打印出来。</p><p>可以获取到的信息有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onConsoleMessage</span><span class="params">(ConsoleMessage consoleMessage)</span> </span>&#123;</div><div class="line">Log.e(<span class="string">"ncmon"</span>, <span class="string">"onConsoleMessage : "</span></div><div class="line">          + <span class="string">"\nmessage="</span> + consoleMessage.message()</div><div class="line">          + <span class="string">"\nlineNumber="</span> + consoleMessage.lineNumber()</div><div class="line">          + <span class="string">"\nmessageLevel="</span> + consoleMessage.messageLevel()</div><div class="line">          + <span class="string">"\nsourceId="</span> + consoleMessage.sourceId());</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onConsoleMessage(consoleMessage);</div><div class="line">&#125;</div><div class="line">ncmon : onConsoleMessage : </div><div class="line">    message=Uncaught TypeError: Cannot read property <span class="string">'getItem'</span> of <span class="keyword">null</span></div><div class="line">    lineNumber=<span class="number">2</span></div><div class="line">    messageLevel=ERROR</div><div class="line">    sourceId=https:<span class="comment">//m.baidu.com/?from=844b&amp;vit=fps</span></div><div class="line">chromium: [INFO:CONSOLE(<span class="number">2</span>)] <span class="string">"Uncaught TypeError: Cannot read property 'getItem' of null"</span>, source: https:<span class="comment">//m.baidu.com/?from=844b&amp;vit=fps (2)</span></div></pre></td></tr></table></figure><p>可以看到除了楼主输出的日志外，还有chromium的日志，这里也就要体现返回值的作用，如果返回true时，就表示拦截了console输出，系统就不再通过console输出出来了；如果返回false(默认值)，则表示没有拦截console输出，调用系统默认处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsoleMessage</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MessageLevel mLevel;</div><div class="line">    <span class="keyword">private</span> String mMessage;</div><div class="line">    <span class="keyword">private</span> String mSourceId;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLineNumber;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4、拦截网页中JS弹框"><a href="#4、拦截网页中JS弹框" class="headerlink" title="4、拦截网页中JS弹框"></a>4、拦截网页中JS弹框</h2><p>三种类型的弹框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message,</span></span></div><div class="line">        JsResult result) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当网页调用alert()来弹出alert弹出框前回调，用以拦截alert()函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsConfirm</span><span class="params">(WebView view, String url, String message,</span></span></div><div class="line">        JsResult result) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>带有确定取消提示，当网页调用confirm()来弹出confirm弹出框前回调，用以拦截confirm()函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsPrompt</span><span class="params">(WebView view, String url, String message,</span></span></div><div class="line">        String defaultValue, JsPromptResult result) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>带有输入框的弹窗，当网页调用prompt()来弹出prompt弹出框前回调，用以拦截prompt()函数</p><ul><li><p>处理JS弹框首先需要设置JavaScript支持，也必须设置WebChromeClient.</p></li><li><p>参数</p><p>url:page_with_curl:：弹出对话框的网页网址</p><p>message:speech_balloon::对话框的内容</p><p>result:closed_umbrella:: 返回给JavaScript的响应，JsResult.confirm()表示点击了弹出框的确定按钮，JsResult.cancel()则表示点击了弹出框的取消按钮。<font color="red">其中JsPromptResult也是继承JsResult的，只是多了输入的内容变量 (String mStringResult)</font></p></li><li><p>返回值 </p><p>true Native 自行处理弹窗逻辑，不弹出alert弹窗了</p><p>false WebView 自行弹出alert对话框处理</p><p>如果是return true，此时我们必须手动调用JsResult的.confirm()或.cancel()方法，因为如果没有调用JsResult的confirm()或cancel()来告诉WebView你的处理结果，则WebView就会认为这个弹出框还一直弹在那里（虽然此时根本没有弹框弹出），所以之后你再点击alert按钮时，将会无效。这一点一定要注意。</p></li></ul><h2 id="5、打开和关闭Window"><a href="#5、打开和关闭Window" class="headerlink" title="5、打开和关闭Window"></a>5、打开和关闭Window</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateWindow</span><span class="params">(WebView view, <span class="keyword">boolean</span> isDialog,</span></span></div><div class="line">        <span class="keyword">boolean</span> isUserGesture, Message resultMsg) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个方法回调的前提需要设置WebView多窗口支持，就是浏览器的多个tab</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webSettings.setSupportMultipleWindows(<span class="keyword">true</span>);<span class="comment">//支持多窗口。如果设置为true</span></div></pre></td></tr></table></figure><p>在Html中，超级链接标签a里有一个target属性，其意义是决定”是否在新窗口/标签页中打开链接”，如果不写target=”_blank”那么就是在相同的标签页打开，如果写了，就是在新的空白标签页中打开。比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.taobao.com/"</span> <span class="attr">title</span>=<span class="string">"淘宝"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>新窗口打开链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><p>WebView默认是不支持target，点击上面的链接会在当前WebView中打开此链接。</p><p>完整逻辑如下</p><ul><li><p>没有设置setSupportMultipleWindows属性为true</p><ul><li>没有setWebChromeClient：点击此链接会在当前WebView中打开此链接</li><li>有setWebChromeClient：点击此链接会在当前WebView中打开此链接，不会回调onCreateWindow方法</li></ul></li><li><p>有设置setSupportMultipleWindows属性为true</p><ul><li><p>没有setWebChromeClient：点击此链接不会在当前WebView中打开此链接</p></li><li><p>有setWebChromeClient</p><ul><li>没有重写onCreateWindow方法：点击此链接不会在当前WebView中打开此链接，会回调onCreateWindow方法</li><li>有重写onCreateWindow方法：点击此链接不会在当前WebView中打开此链接，会回调onCreateWindow方法，会在你新创建的WebView中打开此链接</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateWindow</span><span class="params">(WebView webView, <span class="keyword">boolean</span> isDialog, <span class="keyword">boolean</span> isUserGesture, Message resultMsg)</span> </span>&#123;</div><div class="line">    Log.i(<span class="string">"bqt"</span>, <span class="string">"【onCreateWindow】 "</span> + isDialog + <span class="string">"  "</span> + isUserGesture + <span class="string">"\n详细信息"</span> + resultMsg.toString());</div><div class="line">    <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">        WebView childView = <span class="keyword">new</span> WebView(activity);<span class="comment">//Parent WebView cannot host it's own popup window.</span></div><div class="line">        childView.setBackgroundColor(Color.GREEN);</div><div class="line">        childView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">                Log.i(<span class="string">"bqt"</span>, <span class="string">"【shouldOverrideUrlLoading-子】"</span>);</div><div class="line">                activity.startActivity(<span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(url)));</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        WebView.WebViewTransport transport = (WebView.WebViewTransport) resultMsg.obj;</div><div class="line">        transport.setWebView(childView);<span class="comment">//setWebView和getWebView两个方法</span></div><div class="line">        resultMsg.sendToTarget();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">super</span>.onCreateWindow(webView, isDialog, isUserGesture, resultMsg);<span class="comment">//默认是returns false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>感觉浏览器才会用到这个API,常规应用基本都是打开自己定制的Html页面</p><p>对应的还有一个关闭Window的API，在JS调用window.close()方法时会回调此方法【<button onclick="window.close()">关闭窗口</button>】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCloseWindow</span><span class="params">(WebView window)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure><h2 id="6、文件选择器"><a href="#6、文件选择器" class="headerlink" title="6、文件选择器"></a>6、文件选择器</h2><p>这个方法在项目中很常用，Html中如果需要选择本机文件就需要把文件传过去。基本操作为打开文件管理器再把选择的文件传到网页中。我也有用到，就贴一下完整的代码片段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//For Android  &gt;= 4.1</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(ValueCallback&lt;Uri&gt; valueCallback, String acceptType, String capture)</span> </span>&#123;</div><div class="line">    uploadMessage = valueCallback;</div><div class="line">    openImageChooserActivity();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// For Android &gt;= 5.0</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onShowFileChooser</span><span class="params">(WebView webView, ValueCallback&lt;Uri[]&gt; filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)</span> </span>&#123;</div><div class="line">    uploadMessageAboveL = filePathCallback;</div><div class="line">    Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">    i.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">    <span class="keyword">if</span> (fileChooserParams != <span class="keyword">null</span> &amp;&amp; fileChooserParams.getAcceptTypes() != <span class="keyword">null</span></div><div class="line">                &amp;&amp; fileChooserParams.getAcceptTypes().length &gt; <span class="number">0</span>) &#123;</div><div class="line">i.setType(fileChooserParams.getAcceptTypes()[<span class="number">0</span>]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">i.setType(<span class="string">"*/*"</span>);</div><div class="line">    &#125;</div><div class="line">    startActivityForResult(Intent.createChooser(i, <span class="string">"File Chooser"</span>), FILECHOOSER_RESULTCODE);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">        <span class="keyword">if</span> (requestCode == FILE_CHOOSER_RESULT_CODE) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == uploadMessage &amp;&amp; <span class="keyword">null</span> == uploadMessageAboveL) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            Uri result = data == <span class="keyword">null</span> || resultCode != RESULT_OK ? <span class="keyword">null</span> : data.getData();</div><div class="line">            <span class="keyword">if</span> (uploadMessageAboveL != <span class="keyword">null</span>) &#123;</div><div class="line">                onActivityResultAboveL(requestCode, resultCode, data);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (uploadMessage != <span class="keyword">null</span>) &#123;</div><div class="line">                uploadMessage.onReceiveValue(result);</div><div class="line">                uploadMessage = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@TargetApi</span>(Build.VERSION_CODES.LOLLIPOP)</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onActivityResultAboveL</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (requestCode != FILE_CHOOSER_RESULT_CODE || uploadMessageAboveL == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        Uri[] results = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (resultCode == Activity.RESULT_OK) &#123;</div><div class="line">            <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</div><div class="line">                String dataString = intent.getDataString();</div><div class="line">                ClipData clipData = intent.getClipData();</div><div class="line">                <span class="keyword">if</span> (clipData != <span class="keyword">null</span>) &#123;</div><div class="line">                    results = <span class="keyword">new</span> Uri[clipData.getItemCount()];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clipData.getItemCount(); i++) &#123;</div><div class="line">                        ClipData.Item item = clipData.getItemAt(i);</div><div class="line">                        results[i] = item.getUri();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (dataString != <span class="keyword">null</span>) &#123;</div><div class="line">                    results = <span class="keyword">new</span> Uri[]&#123;Uri.parse(dataString)&#125;;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        uploadMessageAboveL.onReceiveValue(results);</div><div class="line">        uploadMessageAboveL = <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>@params filePathCallback:  提供要上传的文件的路径列表, or NULL to cancel. Must only be called if the showFileChooser implementations returns true.</p><p>@params fileChooserParams:  描述要打开的文件选择器的模式，以及与之一起使用的选项。</p><h2 id="7、视频-全屏-播放"><a href="#7、视频-全屏-播放" class="headerlink" title="7、视频(全屏)播放"></a>7、视频(全屏)播放</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getDefaultVideoPoster</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Html中，视频（video）控件在没有播放的时候将给用户展示一张“海报”图片（预览图）。其预览图是由Html中video标签的<a href="http://www.w3school.com.cn/tags/att_video_poster.asp" target="_blank" rel="external">poster</a>属性来指定的。如果开发者没有设置poster属性, 则可以通过这个方法来设置默认的预览图。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">poster</span>=<span class="string">"/images/w3school.gif"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span>&gt;</span></div><div class="line">   Your browser does not support the video tag.</div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getVideoLoadingProgressView</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>播放视频时，在第一帧呈现之前，需要花一定的时间来进行数据缓冲。ChromeClient可以使用这个函数来提供一个在数据缓冲时显示的视图。 例如,ChromeClient可以在缓冲时显示一个转轮动画。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShowCustomView</span><span class="params">(View view, CustomViewCallback callback)</span> </span>&#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onHideCustomView</span><span class="params">()</span> </span>&#123;&#125;</div></pre></td></tr></table></figure><p>通知主机应用webview需要显示一个custom view，主要是用在视频全屏 HTML5 Video support。</p><p>网页中有H5播放flash video的时候按下全屏按钮将会调用到这个方法，一般用作设置网页播放全屏操作。</p><h2 id="8、获取地理位置"><a href="#8、获取地理位置" class="headerlink" title="8、获取地理位置"></a>8、获取地理位置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGeolocationPermissionsShowPrompt</span><span class="params">(String origin, GeolocationPermissions.Callback callback)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGeolocationPermissionsHidePrompt</span><span class="params">()</span> </span>&#123;&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeolocationPermissions</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * A callback interface used by the host application to set the Geolocation</div><div class="line">     * permission state for an origin.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Sets the Geolocation permission state for the supplied origin.</div><div class="line">         *</div><div class="line">         * <span class="doctag">@param</span> origin the origin for which permissions are set</div><div class="line">         * <span class="doctag">@param</span> allow whether or not the origin should be allowed to use the</div><div class="line">         *              Geolocation API</div><div class="line">         * <span class="doctag">@param</span> retain whether the permission should be retained beyond the</div><div class="line">         *               lifetime of a page currently being displayed by a</div><div class="line">         *               WebView</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(String origin, <span class="keyword">boolean</span> allow, <span class="keyword">boolean</span> retain)</span></span>;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>JavaScript中有调用定位的API时会调用本方法</p><p>@param origin 来源，谁调用的，传回给谁</p><p>@param allow 是否允许本次定位</p><p>@param retain 是否保持允许定位状态，传递了true后，本WebView之后都可以获得当前位置信息。</p><p>对应的onGeolocationPermissionsHidePrompt（）就是通知应用程序，地理位置权限请求已被取消</p><h2 id="9、请求权限"><a href="#9、请求权限" class="headerlink" title="9、请求权限"></a>9、请求权限</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * Notify the host application that web content is requesting permission to</div><div class="line">     * access the specified resources and the permission currently isn't granted</div><div class="line">     * or denied. The host application must invoke &#123;<span class="doctag">@link</span> PermissionRequest#grant(String[])&#125;</div><div class="line">     * or &#123;<span class="doctag">@link</span> PermissionRequest#deny()&#125;.</div><div class="line">     *</div><div class="line">     * If this method isn't overridden, the permission is denied.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> request the PermissionRequest from current web content.</div><div class="line">     */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPermissionRequest</span><span class="params">(PermissionRequest request)</span> </span>&#123;</div><div class="line">    request.deny();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Notify the host application that the given permission request</div><div class="line"> * has been canceled. Any related UI should therefore be hidden.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> request the PermissionRequest that needs be canceled.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPermissionRequestCanceled</span><span class="params">(PermissionRequest request)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionRequest</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String RESOURCE_VIDEO_CAPTURE = <span class="string">"android.webkit.resource.VIDEO_CAPTURE"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String RESOURCE_AUDIO_CAPTURE = <span class="string">"android.webkit.resource.AUDIO_CAPTURE"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String RESOURCE_PROTECTED_MEDIA_ID =</div><div class="line">            <span class="string">"android.webkit.resource.PROTECTED_MEDIA_ID"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String RESOURCE_MIDI_SYSEX = <span class="string">"android.webkit.resource.MIDI_SYSEX"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Uri <span class="title">getOrigin</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String[] getResources();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">grant</span><span class="params">(String[] resources)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">deny</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>@method getorigin()获取来源</p><p>@method getResources()获取请求的权限列表</p><p>@method grant ()允许的权限列表</p><p>@method deny()拒绝了权限</p><p>需要的就是PermissRequest中定义的四个常亮代表的权限，关于权限的使用是其他知识点，大家可以看看这个<a href="https://codeday.me/bug/20181125/420409.html" target="_blank" rel="external">栗子</a>。</p><h2 id="10、其他方法"><a href="#10、其他方法" class="headerlink" title="10、其他方法"></a>10、其他方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *获得所有访问历史项目的列表，用于链接着色。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getVisitedHistory</span><span class="params">(ValueCallback&lt;String[]&gt; callback)</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *webview请求得到焦点，发生这个主要是当前webview不是前台状态，是后台webview。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestFocus</span><span class="params">(WebView view)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android WebView必知必会(2)-WebSettings</title>
      <link href="/post/webview-learning-WebSettings/"/>
      <url>/post/webview-learning-WebSettings/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>WebSettings 看名称就明显了，是对WebView的一些基础设置，网页中需要的一些支持均需要在WebSettings 中设置。获取方式也很简单,通过WebView的方法获得即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> WebSettings <span class="title">getSettings</span><span class="params">()</span> </span>&#123;</div><div class="line">    checkThread();</div><div class="line">    <span class="keyword">return</span> mProvider.getSettings();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><a id="more"></a><p>记录下对应的API含义，基本是直接找来的，大部分在项目用有验证，如果有使用偏差会随时回来修改，大家参考下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否支持缩放，配合方法setBuiltInZoomControls使用，默认true</div><div class="line"> */</div><div class="line">setSupportZoom(<span class="keyword">boolean</span> support)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否需要用户手势来播放Media，默认true</div><div class="line"> */</div><div class="line">setMediaPlaybackRequiresUserGesture(<span class="keyword">boolean</span> require)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否使用WebView内置的缩放组件，由浮动在窗口上的缩放控制和手势缩放控制组成，默认false</div><div class="line"> */</div><div class="line">setBuiltInZoomControls(<span class="keyword">boolean</span> enabled)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否显示窗口悬浮的缩放控制，默认true</div><div class="line"> */</div><div class="line">setDisplayZoomControls(<span class="keyword">boolean</span> enabled)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否允许访问WebView内部文件，默认true</div><div class="line"> */</div><div class="line">setAllowFileAccess(<span class="keyword">boolean</span> allow)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否允许获取WebView的内容URL ，可以让WebView访问ContentPrivider存储的内容。 默认true</div><div class="line"> */</div><div class="line">setAllowContentAccess(<span class="keyword">boolean</span> allow)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否启动概述模式浏览界面，当页面宽度超过WebView显示宽度时，缩小页面适应WebView。默认false</div><div class="line"> */</div><div class="line">setLoadWithOverviewMode(<span class="keyword">boolean</span> overview)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否保存表单数据，默认false</div><div class="line"> */</div><div class="line">setSaveFormData(<span class="keyword">boolean</span> save)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置页面文字缩放百分比，默认100%</div><div class="line"> */</div><div class="line">setTextZoom(<span class="keyword">int</span> textZoom)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否支持ViewPort的meta tag属性，如果页面有ViewPort meta tag 指定的宽度，则使用meta tag指定的值，否则默认使用宽屏的视图窗口</div><div class="line"> */</div><div class="line">setUseWideViewPort(<span class="keyword">boolean</span> use)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否支持多窗口，如果设置为true ，WebChromeClient#onCreateWindow方法必须被主程序实现，默认false</div><div class="line"> */</div><div class="line">setSupportMultipleWindows(<span class="keyword">boolean</span> support)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 指定WebView的页面布局显示形式，调用该方法会引起页面重绘。默认LayoutAlgorithm#NARROW_COLUMNS</div><div class="line"> */</div><div class="line">setLayoutAlgorithm(LayoutAlgorithm l)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置标准的字体族，默认”sans-serif”。font-family 规定元素的字体系列。</div><div class="line"> * font-family 可以把多个字体名称作为一个“回退”系统来保存。如果浏览器不支持第一个字体，</div><div class="line"> * 则会尝试下一个。也就是说，font-family 属性的值是用于某个元素的字体族名称或/及类族名称的一个</div><div class="line"> * 优先表。浏览器会使用它可识别的第一个值。</div><div class="line"> */</div><div class="line">setStandardFontFamily(String font)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置混合字体族。默认”monospace”</div><div class="line"> */</div><div class="line">setFixedFontFamily(String font)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置SansSerif字体族。默认”sans-serif”</div><div class="line"> */</div><div class="line">setSansSerifFontFamily(String font)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置SerifFont字体族，默认”sans-serif”</div><div class="line"> */</div><div class="line">setSerifFontFamily(String font)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置CursiveFont字体族，默认”cursive”</div><div class="line"> */</div><div class="line">setCursiveFontFamily(String font)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置FantasyFont字体族，默认”fantasy”</div><div class="line"> */</div><div class="line">setFantasyFontFamily(String font)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置最小字体，默认8. 取值区间[1-72]，超过范围，使用其上限值。</div><div class="line"> */</div><div class="line">setMinimumFontSize(<span class="keyword">int</span> size)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置最小逻辑字体，默认8. 取值区间[1-72]，超过范围，使用其上限值。</div><div class="line"> */</div><div class="line">setMinimumLogicalFontSize(<span class="keyword">int</span> size)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置默认字体大小，默认16，取值区间[1-72]，超过范围，使用其上限值。</div><div class="line"> */</div><div class="line">setDefaultFontSize(<span class="keyword">int</span> size)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置默认填充字体大小，默认16，取值区间[1-72]，超过范围，使用其上限值。</div><div class="line"> */</div><div class="line">setDefaultFixedFontSize(<span class="keyword">int</span> size)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置是否加载图片资源，注意：方法控制所有的资源图片显示，包括嵌入的本地图片资源。</div><div class="line"> * 使用方法setBlockNetworkImage则只限制网络资源图片的显示。值设置为true后，</div><div class="line"> * webview会自动加载网络图片。默认true</div><div class="line"> */</div><div class="line">setLoadsImagesAutomatically(<span class="keyword">boolean</span> flag)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否加载网络图片资源。注意如果getLoadsImagesAutomatically返回false，则该方法没有效果。</div><div class="line"> * 如果使用setBlockNetworkLoads设置为false，该方法设置为false，也不会显示网络图片。</div><div class="line"> * 当值从true改为false时。WebView会自动加载网络图片。</div><div class="line"> */</div><div class="line">setBlockNetworkImage(<span class="keyword">boolean</span> flag)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置是否加载网络资源。注意如果值从true切换为false后，WebView不会自动加载，</div><div class="line"> * 除非调用WebView#reload().如果没有android.Manifest.permission#INTERNET权限，</div><div class="line"> * 值设为false，则会抛出java.lang.SecurityException异常。</div><div class="line"> * 默认值：有android.Manifest.permission#INTERNET权限时为false，其他为true。</div><div class="line"> */</div><div class="line">setBlockNetworkLoads(<span class="keyword">boolean</span> flag)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置是否允许执行JS。</div><div class="line"> */</div><div class="line">setJavaScriptEnabled(<span class="keyword">boolean</span> flag)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否允许Js访问任何来源的内容。包括访问file scheme的URLs。考虑到安全性，</div><div class="line"> * 限制Js访问范围默认禁用。注意：该方法只影响file scheme类型的资源，其他类型资源如图片类型的，</div><div class="line"> * 不会受到影响。ICE_CREAM_SANDWICH_MR1版本以及以下默认为true，JELLY_BEAN版本</div><div class="line"> * 以上默认为false</div><div class="line"> */</div><div class="line">setAllowUniversalAccessFromFileURLs(<span class="keyword">boolean</span> flag)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否允许Js访问其他file scheme的URLs。包括访问file scheme的资源。考虑到安全性，</div><div class="line"> * 限制Js访问范围默认禁用。注意：该方法只影响file scheme类型的资源，其他类型资源如图片类型的，</div><div class="line"> * 不会受到影响。如果getAllowUniversalAccessFromFileURLs为true，则该方法被忽略。</div><div class="line"> * ICE_CREAM_SANDWICH_MR1版本以及以下默认为true，JELLY_BEAN版本以上默认为false</div><div class="line"> */</div><div class="line">setAllowFileAccessFromFileURLs(<span class="keyword">boolean</span> flag)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置存储定位数据库的位置，考虑到位置权限和持久化Cache缓存，Application需要拥有指定路径的</div><div class="line"> * write权限</div><div class="line"> */</div><div class="line">setGeolocationDatabasePath(String databasePath)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否允许Cache，默认false。考虑需要存储缓存，应该为缓存指定存储路径setAppCachePath</div><div class="line"> */</div><div class="line">setAppCacheEnabled(<span class="keyword">boolean</span> flag)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置Cache API缓存路径。为了保证可以访问Cache，Application需要拥有指定路径的write权限。</div><div class="line"> * 该方法应该只调用一次，多次调用自动忽略。</div><div class="line"> */</div><div class="line">setAppCachePath(String appCachePath)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否允许数据库存储。默认false。查看setDatabasePath API 如何正确设置数据库存储。</div><div class="line"> * 该设置拥有全局特性，同一进程所有WebView实例共用同一配置。注意：保证在同一进程的任一WebView</div><div class="line"> * 加载页面之前修改该属性，因为在这之后设置WebView可能会忽略该配置</div><div class="line"> */</div><div class="line">setDatabaseEnabled(<span class="keyword">boolean</span> flag)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否存储页面DOM结构，默认false。</div><div class="line"> */</div><div class="line">setDomStorageEnabled(<span class="keyword">boolean</span> flag)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否允许定位，默认true。注意：为了保证定位可以使用，要保证以下几点：</div><div class="line"> * Application 需要有android.Manifest.permission#ACCESS_COARSE_LOCATION的权限</div><div class="line"> * Application 需要实现WebChromeClient#onGeolocationPermissionsShowPrompt的回调，</div><div class="line"> * 接收Js定位请求访问地理位置的通知</div><div class="line"> */</div><div class="line">setGeolocationEnabled(<span class="keyword">boolean</span> flag)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否允许JS自动打开窗口。默认false</div><div class="line"> */</div><div class="line">setJavaScriptCanOpenWindowsAutomatically(<span class="keyword">boolean</span> flag)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置页面的编码格式，默认UTF-8</div><div class="line"> */</div><div class="line">setDefaultTextEncodingName(String encoding)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置WebView代理，默认使用默认值</div><div class="line"> */</div><div class="line">setUserAgentString(String ua)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 通知WebView是否需要设置一个节点获取焦点当</div><div class="line"> * WebView#requestFocus(int,android.graphics.Rect)被调用的时候，默认true</div><div class="line"> */</div><div class="line">setNeedInitialFocus(<span class="keyword">boolean</span> flag)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 基于WebView导航的类型使用缓存：正常页面加载会加载缓存并按需判断内容是否需要重新验证。</div><div class="line"> * 如果是页面返回，页面内容不会重新加载，直接从缓存中恢复。setCacheMode允许客户端根据指定的模式来</div><div class="line"> * 使用缓存。</div><div class="line"> * LOAD_DEFAULT 默认加载方式</div><div class="line"> * LOAD_CACHE_ELSE_NETWORK 按网络情况使用缓存</div><div class="line"> * LOAD_NO_CACHE 不使用缓存</div><div class="line"> * LOAD_CACHE_ONLY 只使用缓存</div><div class="line"> */</div><div class="line">setCacheMode(<span class="keyword">int</span> mode)</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置加载不安全资源的WebView加载行为。KITKAT版本以及以下默认为MIXED_CONTENT_ALWAYS_ALLOW方</div><div class="line"> * 式，LOLLIPOP默认MIXED_CONTENT_NEVER_ALLOW。强烈建议：使用MIXED_CONTENT_NEVER_ALLOW</div><div class="line"> */</div><div class="line">setMixedContentMode(<span class="keyword">int</span> mode)</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微博登陆，QQ登录错误码</title>
      <link href="/post/threee-way-login-errorcode/"/>
      <url>/post/threee-way-login-errorcode/</url>
      
        <content type="html"><![CDATA[<p>记录一下第三方登录的错误码，遇到的总结起来，以便排查问题。</p><a id="more"></a><h2 id="Weibo-Login-OAuth2-0"><a href="#Weibo-Login-OAuth2-0" class="headerlink" title="Weibo Login OAuth2.0"></a>Weibo Login OAuth2.0</h2><div class="article-bounded"><div class="article-table"><table><thead><tr><th>错误码(error)</th><th>错误编号(error_code)</th><th>错误描述(error_description)</th></tr></thead><tbody><tr><td>redirect_uri_mismatch</td><td>21322</td><td>重定向地址不匹配 </td></tr><tr><td>invalid_request</td><td>21323</td><td>请求不合法 </td></tr><tr><td>invalid_client</td><td>21324</td><td>client_id或client_secret参数无效</td></tr><tr><td>invalid_grant</td><td>21325</td><td>提供的Access Grant是无效的、过期的或已撤销的</td></tr><tr><td>unauthorized_client</td><td>21326</td><td>客户端没有权限</td></tr><tr><td>expired_token</td><td>21327</td><td>token过期</td></tr><tr><td>unsupported_grant_type</td><td>21328</td><td>不支持的 GrantType</td></tr><tr><td>unsupported_response_type</td><td>21329</td><td>不支持的 ResponseType</td></tr><tr><td>access_denied</td><td>21330</td><td>用户或授权服务器拒绝授予数据访问权限</td></tr><tr><td>temporarily_unavailable</td><td>21331</td><td>服务暂时无法访问</td></tr><tr><td>appkey permission denied</td><td>21337</td><td>应用权限不足</td></tr></tbody></table></div></div><h2 id="QQ-Login-OAuth2-0"><a href="#QQ-Login-OAuth2-0" class="headerlink" title="QQ Login OAuth2.0"></a>QQ Login OAuth2.0</h2><div class="article-bounded"><div class="article-table"><table><thead><tr><th>错误码</th><th>含义说明</th></tr></thead><tbody><tr><td>0</td><td>成功。</td></tr><tr><td>100000</td><td>缺少参数response_type或response_type非法。</td></tr><tr><td>100001</td><td>缺少参数client_id。100002缺少参数client_secret。</td></tr><tr><td>100003</td><td>http head中缺少Authorization。</td></tr><tr><td>100004</td><td>缺少参数grant_type或grant_type非法。</td></tr><tr><td>100005</td><td>缺少参数code。</td></tr><tr><td>100006</td><td>缺少refresh token。</td></tr><tr><td>100007</td><td>缺少access token。</td></tr><tr><td>100008</td><td>该appid不存在。</td></tr><tr><td>100009</td><td>client_secret（即appkey）非法。</td></tr><tr><td>100010</td><td>回调地址不合法，常见原因请见：回调地址常见问题及修改方法100011APP不处于上线状态。</td></tr><tr><td>100012</td><td>HTTP请求非post方式。</td></tr><tr><td>100013</td><td>access token非法。</td></tr><tr><td>100014</td><td>access token过期。 token过期时间为3个月。如果存储的access token过期，请重新走登录流程，根据使用Authorization_Code获取Access_Token或使用Implicit_Grant方式获取Access_Token获取新的access token值。</td></tr><tr><td>100015</td><td>access token废除。 token被回收，或者被用户删除。请重新走登录流程，根据使用Authorization_Code获取Access_Token或使用Implicit_Grant方式获取Access_Token获取新的access token值。</td></tr><tr><td>100016</td><td>access token验证失败。</td></tr><tr><td>100017</td><td>获取appid失败。</td></tr><tr><td>100018</td><td>获取code值失败。</td></tr><tr><td>100019</td><td>用code换取access token值失败。</td></tr><tr><td>100020</td><td>code被重复使用。</td></tr><tr><td>100021</td><td>获取access token值失败。</td></tr><tr><td>100022</td><td>获取refresh token值失败。</td></tr><tr><td>100023</td><td>获取app具有的权限列表失败。</td></tr><tr><td>100024</td><td>获取某OpenID对某appid的权限列表失败。</td></tr><tr><td>100025</td><td>获取全量api信息、全量分组信息。</td></tr><tr><td>100026</td><td>设置用户对某app授权api列表失败。</td></tr><tr><td>100027</td><td>设置用户对某app授权时间失败。</td></tr><tr><td>100028</td><td>缺少参数which。</td></tr><tr><td>100029</td><td>错误的http请求。</td></tr><tr><td>100030</td><td>用户没有对该api进行授权，或用户在腾讯侧删除了该api的权限。请用户重新走登录、授权流程，对该api进行授权。</td></tr><tr><td>100031</td><td>第三方应用没有对该api操作的权限。请发送邮件进行OpenAPI权限申请。</td></tr><tr><td>100032</td><td>过载，一开始未细分时可以用。</td></tr><tr><td>100033</td><td>缺少UIN参数。</td></tr><tr><td>100034</td><td>缺少skey参数</td></tr><tr><td>100035</td><td>用户未登陆。</td></tr><tr><td>100036</td><td>RefreshToken失效。</td></tr><tr><td>100037</td><td>RefreshToken已过期</td></tr><tr><td>100038</td><td>RefreshToken已废除</td></tr><tr><td>100039</td><td>RefreshToken到达调用上限。</td></tr><tr><td>100040</td><td>RefreshToken的AppKey非法。</td></tr><tr><td>100041</td><td>RefreshToken,AppID非法。</td></tr><tr><td>100042</td><td>RefreshToken非法。</td></tr><tr><td>100043</td><td>APP处于暂停状态。</td></tr><tr><td>100044</td><td>错误的sign，Md5校验失败，请求签名与官网填写的签名不一致。</td></tr><tr><td>100045</td><td>用户改密token失效。</td></tr><tr><td>100046</td><td>g_tk校验失败。</td></tr><tr><td>100048</td><td>没有设置companyID。</td></tr><tr><td>100049</td><td>APPID没有权限(get_unionid)。</td></tr><tr><td>100050</td><td>OPENID解密失败，一般是openid和appid不匹配。</td></tr><tr><td>100051</td><td>调试模式无权限。</td></tr><tr><td>110401</td><td>请求的应用不存在。</td></tr><tr><td>110404</td><td>请求参数缺少appid。</td></tr><tr><td>110405</td><td>登录请求被限制，请稍后在登录。</td></tr><tr><td>110406</td><td>应用没有通过审核。</td></tr><tr><td>110500</td><td>获取用户授权信息失败。</td></tr><tr><td>110501</td><td>获取应用的授权信息失败</td></tr><tr><td>110502</td><td>设置用户授权失败</td></tr><tr><td>110503</td><td>获取token失败</td></tr><tr><td>110504</td><td>系统内部错误</td></tr><tr><td>110505</td><td>参数错误</td></tr><tr><td>110506</td><td>获取APP info信息失败</td></tr><tr><td>110506</td><td>校验APP info 签名信息失败</td></tr><tr><td>110508</td><td>获取code失败</td></tr><tr><td>110509</td><td>SKEY校验失败</td></tr><tr><td>110510</td><td>Disable</td></tr></tbody></table></div></div>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android WebView必知必会(1)-WebViewClient</title>
      <link href="/post/webview-learning-WebViewClient/"/>
      <url>/post/webview-learning-WebViewClient/</url>
      
        <content type="html"><![CDATA[<p>项目中遇到了混合开发怎么办，不需要慌，Android提供的WebView已经非常强大，可以和前端同学配合好完成非常多的事情。配合之前呢就需要对WebView做一个全面的了解，看看WebView能做些什么，又怎么去做这些事情，又会遇到哪些问题。</p><h2 id="WebView简介"><a href="#WebView简介" class="headerlink" title="WebView简介"></a>WebView简介</h2><p>从Android4.4系统开始，Chromium内核取代了Webkit内核，正式地接管了WebView的渲染工作。Chromium是一个开源的浏览器内核项目，基于Chromium开源项目修改实现的浏览器非常多，包括最著名的Chrome浏览器，以及一众国内浏览器（360浏览器、QQ浏览器等）。其中Chromium在Android上面的实现是<code>Android System WebView</code>。</p><a id="more"></a><p>从Android5.0系统开始，WebView移植成了一个独立的apk，可以不依赖系统而独立存在和更新，我们可以在<code>系统-&gt;设置-&gt;Android System WebView</code>看到WebView的当前版本。</p><p>从Android7.0系统开始，如果系统安装了Chrome (version&gt;51)，那么Chrome将会直接为应用的WebView提供渲染，WebView版本会随着Chrome的更新而更新，用户也可以选择WebView的服务提供方（在开发者选项-&gt;WebView Implementation里），WebView可以脱离应用，在一个独立的沙盒进程中渲染页面（需要在开发者选项里打开）。</p><p>从Android8.0系统开始，默认开启WebView多进程模式，即WebView运行在独立的沙盒进程中。</p><h2 id="WebViewClient"><a href="#WebViewClient" class="headerlink" title="WebViewClient"></a>WebViewClient</h2><h3 id="抛砖"><a href="#抛砖" class="headerlink" title="抛砖"></a>抛砖</h3><p>WebView加载在线网页必备，如果不设置，会直接跳转打开浏览器应用加载网页！同时包含很多有用的回调函数。</p><p>举一个小栗子：</p><p>通常加载一个网页都需要一定的时间，这时候就需要一个loading友好提示一下用户，正在加载，加载完成后隐藏它。这个怎么实现呢，就需要用到WebViewClient了，WebViewClient包含了很多网页加载需要用到的回调。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPageStarted(view, url, favicon);</div><div class="line">        Log.d(TAG,<span class="string">"onPageStarted"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">        Log.d(TAG,<span class="string">"onPageFinished"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>WebView.setWebViewClient方法设置WebViewClient回调，重写了两个方法，onPageStarted会在加载网页时调用，onPageFinished就代表加载完成了。利用这两个方法就能完成loading的控制。在onPageFinished中也可以通过WebView.getTitle（）可获得当前网页加载完时的title(这里指Html文件中head中的title)等，当然对某些网页时不准的，因为网页中可能会通过JS代码动态的修改title,这个操作是在onPageFinish()之后进行的，这个title在另外的函数可以获取到，总结WebChromeClient的时候会讲到。</p><h3 id="常用函数简介"><a href="#常用函数简介" class="headerlink" title="常用函数简介"></a>常用函数简介</h3><p>不一定全都会用到，先学习一下，以备不时之需，会挑几个非常常用的总结下使用场景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 在开始加载网页时会回调</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 在结束加载网页时会回调</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 拦截 url 跳转,在里边添加点击链接跳转或者操作</div><div class="line"> */</div><div class="line">@Deprecated</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span></div><div class="line"><span class="comment">//sdk&gt;=24    </span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, WebResourceRequest request)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 在每一次请求资源时，都会通过这个函数来回调,请求资源的主机应用程序允许应用程序返回数据，如果该方法返回</div><div class="line"> * null，WebView将会按照平常一样继续加载；否则，返回的内容将会被使用。该方法在独立线程而非UI线程中回</div><div class="line"> * 调，因此访问私有数据或系统视图时应该谨慎行事。</div><div class="line"> */</div><div class="line">@Deprecated</div><div class="line"><span class="keyword">public</span> WebResourceResponse <span class="title">shouldInterceptRequest</span><span class="params">(WebView view,String url)</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> WebResourceResponse <span class="title">shouldInterceptRequest</span><span class="params">(WebView view,WebResourceRequest request)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> shouldInterceptRequest(view, request.getUrl().toString());</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *加载资源完成（与shouldInterceptRequest对应）</div><div class="line"> */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadResource</span><span class="params">(WebView view, String url)</span> </span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 加载错误的时候会回调，在其中可做错误处理，比如再请求加载一次，或者提示自定义的网路问题页面</div><div class="line"> */</div><div class="line">@Deprecated</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, <span class="keyword">int</span> errorCode,String description, String failingUrl)</span></div><div class="line"><span class="comment">//sdk&gt;=23 </span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, WebResourceRequest request, WebResourceError error)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 当接收到https错误时，会回调此函数，在其中可以做错误处理</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedSslError</span><span class="params">(WebView view, SslErrorHandler handler,SslError error)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 回调该方法，处理SSL认证请求</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedClientCertRequest</span><span class="params">(WebView view, ClientCertRequest request)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 页面大小改变后回调该方法，获取缩放前后大小</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScaleChanged</span><span class="params">(WebView view, <span class="keyword">float</span> oldScale, <span class="keyword">float</span> newScale)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 更新历史记录</div><div class="line"> * @param isReload 代表Url是重新载入的</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUpdateVisitedHistory</span><span class="params">(WebView view, String url, <span class="keyword">boolean</span> isReload)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 账户自动登录</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedLoginRequest</span><span class="params">(WebView view, String realm,String account, String args)</span> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 通知主程序输入事件不是由WebView调用。是否让主程序处理WebView未处理的Input Event。</div><div class="line"> * 除了系统按键，WebView总是消耗掉输入事件或shouldOverrideKeyEvent返回true。</div><div class="line"> * 该方法由event 分发异步调用。注意：如果事件为MotionEvent，则事件的生命周期只存在方法调用过程中，</div><div class="line"> * 如果WebViewClient想要使用这个Event，则需要复制Event对象。</div><div class="line"> */</div><div class="line"><span class="title">onUnhandledInputEvent</span><span class="params">(WebView view, InputEvent event)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 如果浏览器需要重新发送POST请求，可以通过这个时机来处理。默认是不重新发送数据。 参数说明</div><div class="line"> * @param dontResend 浏览器不需要重新发送的参数</div><div class="line"> * @param resend浏览器需要重新发送的参数</div><div class="line"> */</div><div class="line">@Override</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFormResubmission</span><span class="params">(WebView view, Message dontResend,Message resend)</span>！</div></pre></td></tr></table></figure><h4 id="shouldOverrideUrlLoading"><a href="#shouldOverrideUrlLoading" class="headerlink" title="shouldOverrideUrlLoading"></a>shouldOverrideUrlLoading</h4><p>非常重要的方法，第一个就需要说明，重定向，超链接都会用的方法，这个函数在加载超链接时会回调，由于这个函数是在加载Url之前调用，返回值true代表拦截处理就不再继续加载了，返回false则继续加载，所以如果需要做一些白名单黑名单操作可以在这里处理它们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>默认既返回false。所以如果没有其他设置需求可以采用设置一个默认的WebViewClient既能保持正常加载网页。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient());</div></pre></td></tr></table></figure><p>有重载方法，在SDK&gt;=24调用，所以如果需要处理，需要两个函数都重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, WebResourceRequest request)</span></span></div></pre></td></tr></table></figure><h4 id="onReceivedError"><a href="#onReceivedError" class="headerlink" title="onReceivedError"></a>onReceivedError</h4><p>接收网络错误，典型使用场景是加载404页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</div><div class="line">        <span class="comment">//如果是主frame的话就执行方法，要是在其他比如iframes就会不执行</span></div><div class="line"><span class="keyword">if</span> (request.isForMainFrame()) &#123;</div><div class="line">onReceivedError(view,error.getErrorCode(), rror.getDescription().toString(),request.getUrl().toString());</div><div class="line">&#125;</div><div class="line">    <span class="comment">//处理加载本地错误页面</span></div><div class="line">    mWebView.loadUrl(<span class="string">"file:///android_asset/http_error.html"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>WebResourceError包含了错误信息,其中的ErrorCode对应WebViewClient中的常量ERROR_*可以做对应处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WebResourceError</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getErrorCode</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> CharSequence <span class="title">getDescription</span><span class="params">()</span></span>;</div><div class="line">    <span class="meta">@SystemApi</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebResourceError</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="onReceivedSslError"><a href="#onReceivedSslError" class="headerlink" title="onReceivedSslError"></a>onReceivedSslError</h4><p>很多帖子都介绍了这个方法，顾名思义与处理SSL错误有关，也就是处理https的请求时验证出错，看到的很多例子都是以以前的12306网站为例，以前的12306是自签名证书，所以用chrome打开时会出现警告，如果用WebView加载这里就会回调onReceivedSslError函数，笔者写这篇笔记时12306已经是公共证书了，也就没有这个错误验证了。暂时使用自己的理解介绍一下，以后发现可用网站再验证：</p><p>该函数的默认实现为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedSslError</span><span class="params">(WebView view, SslErrorHandler handler,SslError error)</span> </span>&#123;</div><div class="line">handler.cancel();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>SslErrorHandler.cancel()就是结束了Ssl处理，也就不会继续加载了，这里子类可以重写处理逻辑为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedSslError</span><span class="params">(WebView view, SslErrorHandler handler,SslError error)</span> </span>&#123;</div><div class="line">    <span class="comment">//super.onReceivedSslError(view, handler, error);</span></div><div class="line">handler.proceed();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>改变了SslErrorHandler的处理，使其能继续验证证书，正常打开该网页。</p><p><code>需要注意的是如果有回调了onReceivedSslError，是不会同时回调onReceivedError的</code></p><p>WebViewClient还有很多没有介绍到的方法，有机会还是找一些应用场景试验下再行补充，这篇文章先到这里吧，之后再总结下常用设置和WebChromeClient相关。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> WebView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NestedScrollView嵌套RecyclerView滑动冲突</title>
      <link href="/post/design-clear-of-mines-2/"/>
      <url>/post/design-clear-of-mines-2/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Android使用disign 中控件NestedScrollView+RecyclerView嵌套时上下滑动会有明显的阻塞感，显然是遇到了滑动冲突<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fillViewport</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"2dp"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/space1"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在XML中 可以对RecyclerView 设置 android:nestedScrollingEnabled=”false”不过这样只支持Android 21以上的版本，<br>对应的设置RecyclerView的属性mRecyclerView.setNestedScrollingEnabled(false)由于是support支持库中的方法即可兼容低版本。</p>]]></content>
      
      
      <categories>
          
          <category> 错误志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Design </tag>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NestedScrollView嵌套ViewPager 显示冲突</title>
      <link href="/post/design-clear-of-mines-1/"/>
      <url>/post/design-clear-of-mines-1/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Android使用disign中自带控件CoordinatorLayout+TabLayout+NestedScrollView+ViewPager来实现可折叠头部的也可横下滑动的列表的页面<br>NestedScrollView中嵌套了ViewPager来展示不同的Tab滑动展示，ViewPager显示的高度为0，从AndroidStudio预览页面即可看到。<br><a id="more"></a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>为NestedScrollView设置 android:fillViewport=”true” 解决<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fillViewport</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/viewpager"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 错误志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Design </tag>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Jetpack Architecture之ViewModel</title>
      <link href="/post/Jetpack-Architecture-ViewModel/"/>
      <url>/post/Jetpack-Architecture-ViewModel/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><br>&ensp;&ensp;Jetpack已经出了很久很久了，近几年的GDD几乎每次都会介绍新的组件，说来惭愧，一直没有好好学习，看近年的Google 的很多Demo中其实都有所体现，之前都是大概的了解了一遍。最近决定，好好梳理一遍，既学习其用法，也尝试学习下其设计思想。也是时候该补充一下了。进入正题–ViewModel<br><br>&ensp;&ensp;首先都是看官方的例子，<a href="https://developer.android.google.cn/topic/libraries/architecture/viewmodel" title="Jetpack-ViewModel" target="_blank" rel="external">ViewModel</a>官方的的例子是会和另一个架构库LiveData写在一起，很多的博客也是照官方的例子来说明，开始接触时甚至给了我一种假象：ViewModel都是和LiveData一起使用的。后来阅读才了解，ViewModel和LiveData职责分工还是很明显的，使用LiveData Demo主要使用其observe功能，LiveDate的使用及原理之后再分析，甚至在appcompat-v7:27.1.1中直接单独集成了ViewModel.所以，故为排除干扰，今天不会使用官方的主流Demo用法，先来看ViewModel。<br><a id="more"></a></p><h1 id="ViewModel简介"><a href="#ViewModel简介" class="headerlink" title="ViewModel简介"></a>ViewModel简介</h1><p><br>&ensp;&ensp;Android的UI控制器（Activity和Fragment）从创建到销毁拥有自己完整的生命周期，当系统配置发生改变时（(Configuration changes)），系统就会销毁Activity和与之关联的Fragment然后再次重建<font color="#FFA500">（可通过在AndroidManifast.xml中配置android:configChanges修改某些行为，这里不讨论）</font>,那么存储在当前UI中的临时数据也会被清空，例如，登陆输入框，输入账号或密码后旋转屏幕，视图被重建，输入过的数据也清空了，这无疑是一种不友好的用户体验。对于少量的可序列化数据可以使用onSaveInstanceState()方法保存然后在onCreate()方法中重新恢复，正如所说onSaveInstanceState对于大量的数据缓存有一定的局限性，大量的数据缓存则可以使用<a href="https://developer.android.com/reference/android/support/v4/app/Fragment" title="Fragment-reference" target="_blank" rel="external">Fragment</a>.setRetainInstance(true)来保存数据。ViewModel也是提供了相同的功能，用来存储和管理与UI相关的数据，允许数据在系统配置变化后存活，我们一起看一下这个ViewModel的缓存是怎么实现的呢？</p><h2 id="ViewModel使用方式"><a href="#ViewModel使用方式" class="headerlink" title="ViewModel使用方式"></a>ViewModel使用方式</h2><p><br>先上效果图<br><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/device-2018-09-27-224647_20180927224809.gif" width="300" div="" align="center"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</div><div class="line">   String name;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCleared</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCleared();</div><div class="line">    name = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>&nbsp;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ViewModelActivity"</span>;</div><div class="line">    TextView textView;</div><div class="line">    <span class="keyword">private</span> MyViewModel myViewModel;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_viewmodel);</div><div class="line">        textView = findViewById(R.id.textView);</div><div class="line">        textView.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        ViewModelProvider.Factory factory = ViewModelProvider.AndroidViewModelFactory.getInstance(getApplication());</div><div class="line"><span class="comment">/*</span></div><div class="line">*这里的this是ViewModelStoreOwner接口在appcompat-v7:27.1.1支持库中AppCompatActivity已经实现了，</div><div class="line">*如果是较低版本，需要更新支持包或者参考其实现对本来继承的Activity做对应实现。</div><div class="line">*/</div><div class="line">        ViewModelProvider provider = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>, factory);<span class="comment">//</span></div><div class="line">        myViewModel = provider.get(MyViewModel.class);</div><div class="line">        Log.e(TAG, <span class="string">"onCreate: "</span> + myViewModel.getName() );</div><div class="line">        <span class="keyword">if</span> (myViewModel.getName() != <span class="keyword">null</span>) &#123;</div><div class="line">            textView.setText(myViewModel.getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.textView:</div><div class="line">                myViewModel.setName(<span class="string">"MyViewModel Test"</span>);</div><div class="line">                textView.setText(myViewModel.getName());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"default"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure></p><p>非常简单的一个例子，这就是ViewModel最简单的使用了，就是TextView中显示ViewModel的数据。ViewModel需要由ViewModelProvider.get(Class<t>)来取得，旋转屏幕销毁后，之前改变的数据还在。<br>接下来就是进入主题分析下ViewModel到底是怎么实现的呢？<br>带着问题看源码：  </t></p><h1 id="带给我们的疑问"><a href="#带给我们的疑问" class="headerlink" title="带给我们的疑问"></a>带给我们的疑问</h1><ul><li>ViewModelProvider是干啥的？</li><li>AndroidViewModelFactory 这命名一看就是应该是工厂模式，工厂创建了什么？</li><li>provider.get(MyViewModel.class) 这里直接使用的get命名就得到了需要的唯一数据</li><li>注释中ViewModelStoreOwner又是什么角色？<br>先看ViewModel类，没什么说的，就是一个么有任何真正实现的抽象类，只有一个抽象方法onCleared()</li></ul><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModel</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This method will be called when this ViewModel is no longer used and will be destroyed.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * It is useful when ViewModel observes some data and you need to clear this subscription to</div><div class="line">     * prevent a leak of this ViewModel.</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCleared</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接着看下ViewModelFactory，顾名思义就是制造ViewModel的。<br>AndroidViewModelFactory的继承关系如下:</p><blockquote><p>android.arch.lifecycle.ViewModelProvider.Factory</p><blockquote><p>android.arch.lifecycle.ViewModelProvider.NewInstanceFactory</p><blockquote><p>android.arch.lifecycle.ViewModelProvider.AndroidViewModelFactory</p></blockquote></blockquote></blockquote><p>Factory是一个只包含一个create的interface，NewInstanceFactory实现了该方法传入Class<t>会利用ViewModel的默认无参构造器创建一个对应ViewModel的实例，而AndroidViewModelFactory增加了一个属性就是应用的Applicaion,同时重写create方法，查看ViewModel是否有包含Applicaion参数的构造方法从而使用，对应的其实还有一个AndroidViewModel是ViewModel的子类，默认已经实现了带有Application参数的构造方法，需要使用在ViewModel中使用application的直接继承AndroidViewModel就可以，看到这里其实最上面的例子有个不是问题的问题，其实上面的Factory直接使用NewInstanceFactory就可以创建出对应的ViewModel实例了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Implementations of &#123;<span class="doctag">@code</span> Factory&#125; interface are responsible to instantiate ViewModels.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates a new instance of the given &#123;<span class="doctag">@code</span> Class&#125;.</div><div class="line">     * &lt;p&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> modelClass a &#123;<span class="doctag">@code</span> Class&#125; whose instance is requested</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;        The type parameter for the ViewModel.</div><div class="line">     * <span class="doctag">@return</span> a newly created ViewModel</div><div class="line">     */</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    &lt;T extends ViewModel&gt; <span class="function">T <span class="title">create</span><span class="params">(@NonNull Class&lt;T&gt; modelClass)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Simple factory, which calls empty constructor on the give class.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NewInstanceFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"ClassNewInstance"</span>)</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">create</span><span class="params">(@NonNull Class&lt;T&gt; modelClass)</span> </span>&#123;</div><div class="line">        <span class="comment">//noinspection TryWithIdenticalCatches</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> modelClass.newInstance();</div><div class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot create an instance of "</span> + modelClass, e);</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot create an instance of "</span> + modelClass, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * &#123;<span class="doctag">@link</span> Factory&#125; which may create &#123;<span class="doctag">@link</span> AndroidViewModel&#125; and</div><div class="line"> * &#123;<span class="doctag">@link</span> ViewModel&#125;, which have an empty constructor.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidViewModelFactory</span> <span class="keyword">extends</span> <span class="title">ViewModelProvider</span>.<span class="title">NewInstanceFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AndroidViewModelFactory sInstance;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Retrieve a singleton instance of AndroidViewModelFactory.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> application an application to pass in &#123;<span class="doctag">@link</span> AndroidViewModel&#125;</div><div class="line">     * <span class="doctag">@return</span> A valid &#123;<span class="doctag">@link</span> AndroidViewModelFactory&#125;</div><div class="line">     */</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AndroidViewModelFactory <span class="title">getInstance</span><span class="params">(@NonNull Application application)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            sInstance = <span class="keyword">new</span> AndroidViewModelFactory(application);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Application mApplication;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates a &#123;<span class="doctag">@code</span> AndroidViewModelFactory&#125;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> application an application to pass in &#123;<span class="doctag">@link</span> AndroidViewModel&#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AndroidViewModelFactory</span><span class="params">(@NonNull Application application)</span> </span>&#123;</div><div class="line">        mApplication = application;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">create</span><span class="params">(@NonNull Class&lt;T&gt; modelClass)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (AndroidViewModel.class.isAssignableFrom(modelClass)) &#123;</div><div class="line">            <span class="comment">//noinspection TryWithIdenticalCatches</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> modelClass.getConstructor(Application.class).newInstance(mApplication);</div><div class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot create an instance of "</span> + modelClass, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot create an instance of "</span> + modelClass, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot create an instance of "</span> + modelClass, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot create an instance of "</span> + modelClass, e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.create(modelClass);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>之后通过ViewModelStoreOwner和刚刚创建的Factory创建出ViewModelPrivider实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Creates &#123;<span class="doctag">@code</span> ViewModelProvider&#125;, which will create &#123;<span class="doctag">@code</span> ViewModels&#125; via the given</div><div class="line"> * &#123;<span class="doctag">@code</span> Factory&#125; and retain them in a store of the given &#123;<span class="doctag">@code</span> ViewModelStoreOwner&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> owner   a &#123;<span class="doctag">@code</span> ViewModelStoreOwner&#125; whose &#123;<span class="doctag">@link</span> ViewModelStore&#125; will be used to</div><div class="line"> *                retain &#123;<span class="doctag">@code</span> ViewModels&#125;</div><div class="line"> * <span class="doctag">@param</span> factory a &#123;<span class="doctag">@code</span> Factory&#125; which will be used to instantiate</div><div class="line"> *                new &#123;<span class="doctag">@code</span> ViewModels&#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewModelProvider</span><span class="params">(@NonNull ViewModelStoreOwner owner, @NonNull Factory factory)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(owner.getViewModelStore(), factory);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Creates &#123;<span class="doctag">@code</span> ViewModelProvider&#125;, which will create &#123;<span class="doctag">@code</span> ViewModels&#125; via the given</div><div class="line"> * &#123;<span class="doctag">@code</span> Factory&#125; and retain them in the given &#123;<span class="doctag">@code</span> store&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> store   &#123;<span class="doctag">@code</span> ViewModelStore&#125; where ViewModels will be stored.</div><div class="line"> * <span class="doctag">@param</span> factory factory a &#123;<span class="doctag">@code</span> Factory&#125; which will be used to instantiate</div><div class="line"> *                new &#123;<span class="doctag">@code</span> ViewModels&#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewModelProvider</span><span class="params">(@NonNull ViewModelStore store, @NonNull Factory factory)</span> </span>&#123;</div><div class="line">    mFactory = factory;</div><div class="line">    <span class="keyword">this</span>.mViewModelStore = store;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * A scope that owns &#123;<span class="doctag">@link</span> ViewModelStore&#125;.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * A responsibility of an implementation of this interface is to retain owned ViewModelStore</div><div class="line"> * during the configuration changes and call &#123;<span class="doctag">@link</span> ViewModelStore#clear()&#125;, when this scope is</div><div class="line"> * going to be destroyed.</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewModelStoreOwner</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns owned &#123;<span class="doctag">@link</span> ViewModelStore&#125;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> a &#123;<span class="doctag">@code</span> ViewModelStore&#125;</div><div class="line">     */</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="function">ViewModelStore <span class="title">getViewModelStore</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ViewModelStoreOwner 也是一个接口是FragmentActivity实现了该接口并实现了其中的getViewModelStore()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentActivity</span> <span class="keyword">extends</span> <span class="title">BaseFragmentActivityApi16</span> <span class="keyword">implements</span></span></div><div class="line">        <span class="title">ViewModelStoreOwner</span>...&#123;</div><div class="line">    <span class="keyword">private</span> ViewModelStore mViewModelStore;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        mFragments.attachHost(<span class="keyword">null</span> <span class="comment">/*parent*/</span>);</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        NonConfigurationInstances nc =</div><div class="line">                (NonConfigurationInstances) getLastNonConfigurationInstance();</div><div class="line">        <span class="keyword">if</span> (nc != <span class="keyword">null</span>) &#123;</div><div class="line">            mViewModelStore = nc.viewModelStore;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the &#123;<span class="doctag">@link</span> ViewModelStore&#125; associated with this activity</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> a &#123;<span class="doctag">@code</span> ViewModelStore&#125;</div><div class="line">     */</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewModelStore <span class="title">getViewModelStore</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getApplication() == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Your activity is not yet attached to the "</span></div><div class="line">                    + <span class="string">"Application instance. You can't request ViewModel before onCreate call."</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mViewModelStore == <span class="keyword">null</span>) &#123;</div><div class="line">            mViewModelStore = <span class="keyword">new</span> ViewModelStore();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mViewModelStore;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这个ViewModelStore又是什么呢，其实就是真正利用HashMap存储ViewModel的地方了，看下代码在存储和clear同时会调用ViewModel需要实现的抽象方法onClear()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelStore</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, ViewModel viewModel)</span> </span>&#123;</div><div class="line">        ViewModel oldViewModel = mMap.put(key, viewModel);</div><div class="line">        <span class="keyword">if</span> (oldViewModel != <span class="keyword">null</span>) &#123;</div><div class="line">            oldViewModel.onCleared();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> ViewModel <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mMap.get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  Clears internal storage and notifies ViewModels that they are no longer used.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (ViewModel vm : mMap.values()) &#123;</div><div class="line">            vm.onCleared();</div><div class="line">        &#125;</div><div class="line">        mMap.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样ViewModelProvider就是有了一个ViewModel的容器，这时去调用ViewModelProvider的get(Class<t>)方法就是去调用mViewModelStore<br>的get()方法取出对应的ViewModel所以这里只要持有的ViewModelStore是有缓存的，那么取出的ViewModel就是相同的缓存了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns an existing ViewModel or creates a new one in the scope (usually, a fragment or</div><div class="line"> * an activity), associated with this &#123;<span class="doctag">@code</span> ViewModelProvider&#125;.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * The created ViewModel is associated with the given scope and will be retained</div><div class="line"> * as long as the scope is alive (e.g. if it is an activity, until it is</div><div class="line"> * finished or process is killed).</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> modelClass The class of the ViewModel to create an instance of it if it is not</div><div class="line"> *                   present.</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt;        The type parameter for the ViewModel.</div><div class="line"> * <span class="doctag">@return</span> A ViewModel that is an instance of the given type &#123;<span class="doctag">@code</span> T&#125;.</div><div class="line"> */</div><div class="line"><span class="meta">@NonNull</span></div><div class="line"><span class="meta">@MainThread</span></div><div class="line"><span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">get</span><span class="params">(@NonNull Class&lt;T&gt; modelClass)</span> </span>&#123;</div><div class="line">    String canonicalName = modelClass.getCanonicalName();</div><div class="line">    <span class="keyword">if</span> (canonicalName == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Local and anonymous classes can not be ViewModels"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> get(DEFAULT_KEY + <span class="string">":"</span> + canonicalName, modelClass);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@NonNull</span></div><div class="line"><span class="meta">@MainThread</span></div><div class="line"><span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">get</span><span class="params">(@NonNull String key, @NonNull Class&lt;T&gt; modelClass)</span> </span>&#123;</div><div class="line">    ViewModel viewModel = mViewModelStore.get(key);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (modelClass.isInstance(viewModel)) &#123;</div><div class="line">        <span class="comment">//noinspection unchecked</span></div><div class="line">        <span class="keyword">return</span> (T) viewModel;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//noinspection StatementWithEmptyBody</span></div><div class="line">        <span class="keyword">if</span> (viewModel != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span> log a warning.</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    viewModel = mFactory.create(modelClass);</div><div class="line">    mViewModelStore.put(key, viewModel);</div><div class="line">    <span class="comment">//noinspection unchecked</span></div><div class="line">    <span class="keyword">return</span> (T) viewModel;</div><div class="line">&#125;</div></pre></td></tr></table></figure></t></p><p>看到这里就会发现ViewModelStore的缓存其实是通过NonConfigurationInstances的缓存来实现的，这样就完成了Activity销毁重建后ViewModel还保存原来的数据的过程，那么NonConfigurationInstances 是什么呢？如果有了解过使用在Activity中使用onRetainNonConfigurationInstance()保存缓存数据，在onCreate()中通过getLastNonConfigurationInstance()恢复之前的数据状态的同学可能会很熟悉这里的写法，是的，这里FragmentActivity就是使用的这种方式来保存之前的ViewModelStore,看下FragmentActivity的onRetainNonConfigurationInstance()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Retain all appropriate fragment state.  You can NOT</div><div class="line"> * override this yourself!  Use &#123;<span class="doctag">@link</span> #onRetainCustomNonConfigurationInstance()&#125;</div><div class="line"> * if you want to retain your own state.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">onRetainNonConfigurationInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mStopped) &#123;</div><div class="line">        doReallyStop(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Object custom = onRetainCustomNonConfigurationInstance();</div><div class="line"></div><div class="line">    FragmentManagerNonConfig fragments = mFragments.retainNestedNonConfig();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (fragments == <span class="keyword">null</span> &amp;&amp; mViewModelStore == <span class="keyword">null</span> &amp;&amp; custom == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    NonConfigurationInstances nci = <span class="keyword">new</span> NonConfigurationInstances();</div><div class="line">    nci.custom = custom;</div><div class="line">    nci.viewModelStore = mViewModelStore;<span class="comment">//就是这里了，会把之前的VeiwmodelStroe存储到NonConfigurationInstances中以供后续恢复使用</span></div><div class="line">    nci.fragments = fragments;</div><div class="line">    <span class="keyword">return</span> nci;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里其实再次出现了一个问题  onRetainNonConfigurationInstance()和getLastNonConfigurationInstance()又是怎么恢复数据呢?…这个其实和Activity的启动流程相关，这里也介绍一下吧，之后的内容其实是Activity的内容了，趁这次看ViwModel也跟着看了一遍，有了解过Activity启动流程的同学更容易理解的多，大家酌情观看。</p><p>也不能从头开始说起，再从头就要越扯越远了，就从ActivityThread.java中的scheduleLaunchActivity开始<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleLaunchActivity</span><span class="params">(Intent intent, IBinder token, <span class="keyword">int</span> ident,</span></span></div><div class="line">        ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</div><div class="line">        CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,</div><div class="line">        <span class="keyword">int</span> procState, Bundle state, PersistableBundle persistentState,</div><div class="line">        List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</div><div class="line">        <span class="keyword">boolean</span> notResumed, <span class="keyword">boolean</span> isForward, ProfilerInfo profilerInfo) &#123;</div><div class="line"></div><div class="line">    updateProcessState(procState, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">    ActivityClientRecord r = <span class="keyword">new</span> ActivityClientRecord();</div><div class="line"></div><div class="line">    r.token = token;</div><div class="line">    r.ident = ident;</div><div class="line">    r.intent = intent;</div><div class="line">    r.referrer = referrer;</div><div class="line">    r.voiceInteractor = voiceInteractor;</div><div class="line">    r.activityInfo = info;</div><div class="line">    r.compatInfo = compatInfo;</div><div class="line">    r.state = state;</div><div class="line">    r.persistentState = persistentState;</div><div class="line"></div><div class="line">    r.pendingResults = pendingResults;</div><div class="line">    r.pendingIntents = pendingNewIntents;</div><div class="line"></div><div class="line">    r.startsNotResumed = notResumed;</div><div class="line">    r.isForward = isForward;</div><div class="line"></div><div class="line">    r.profilerInfo = profilerInfo;</div><div class="line"></div><div class="line">    r.overrideConfig = overrideConfig;</div><div class="line">    updatePendingConfiguration(curConfig);</div><div class="line"></div><div class="line">    sendMessage(H.LAUNCH_ACTIVITY, r);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从ActivityThread.java中H（extents Handler）接收到LAUNCH_ACTIVITY，并且会接收ActivityClientRecord，其中会调用ActivityThread的handleLaunchActivity方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ActivityThread.java</span></div><div class="line"><span class="comment">//没有前后文的H中的handleMessage~~~</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">           <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">"&gt;&gt;&gt; handling: "</span> + codeToString(msg.what));</div><div class="line">           <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">               <span class="keyword">case</span> LAUNCH_ACTIVITY: &#123;</div><div class="line">                   Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStart"</span>);</div><div class="line">                   <span class="keyword">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</div><div class="line"><span class="comment">//ActivityClientRecord 是apk进程中一个Activity的代表，这个对象的activity成员引用真正的Activity组件,后面的都和它有关系</span></div><div class="line">                   r.packageInfo = getPackageInfoNoCheck(</div><div class="line">                           r.activityInfo.applicationInfo, r.compatInfo);</div><div class="line">                   handleLaunchActivity(r, <span class="keyword">null</span>, <span class="string">"LAUNCH_ACTIVITY"</span>);<span class="comment">///这里~这里~</span></div><div class="line">                   Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">               &#125; <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent, String reason)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        Activity a = performLaunchActivity(r, customIntent);</div><div class="line"> ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class="line">...</div><div class="line">    <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">            CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</div><div class="line">            Configuration config = <span class="keyword">new</span> Configuration(mCompatConfiguration);</div><div class="line">            <span class="keyword">if</span> (r.overrideConfig != <span class="keyword">null</span>) &#123;</div><div class="line">                config.updateFrom(r.overrideConfig);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG, <span class="string">"Launching activity "</span></div><div class="line">                    + r.activityInfo.name + <span class="string">" with config "</span> + config);</div><div class="line">            Window window = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (r.mPendingRemoveWindow != <span class="keyword">null</span> &amp;&amp; r.mPreserveWindow) &#123;</div><div class="line">                window = r.mPendingRemoveWindow;</div><div class="line">                r.mPendingRemoveWindow = <span class="keyword">null</span>;</div><div class="line">                r.mPendingRemoveWindowManager = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            appContext.setOuterContext(activity);</div><div class="line">            activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</div><div class="line">                    r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class="line">                    r.embeddedID, r.lastNonConfigurationInstances, config, <span class="comment">//看到这个r.lastNonConfigurationInstances 就是在Activity方法中调用getLastNonConfigurationInstance()获取到的Object了。</span></div><div class="line">                    r.referrer, r.voiceInteractor, window, r.configCallback);</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注释中的地方就是lastNonConfigurationInstances的赋值的地方，可能会发现在scheduleLaunchActivity并没有对lastNonConfigurationInstances赋值，因为第一次启动Activity时，这里其实就是null的，那么赋值的地方在哪里呢，既然是销毁后会恢复数据，追踪发现在performDestroyActivity()也就是在调用onDestroy生命周期之前有这样一段代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ActivityClientRecord <span class="title">performDestroyActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> finishing,</span></span></div><div class="line">            <span class="keyword">int</span> configChanges, <span class="keyword">boolean</span> getNonConfigInstance) &#123;</div><div class="line">        ActivityClientRecord r = mActivities.get(token);</div><div class="line">        ...无关代码省略</div><div class="line">            <span class="keyword">if</span> (getNonConfigInstance) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    r.lastNonConfigurationInstances</div><div class="line">                            = r.activity.retainNonConfigurationInstances();<span class="comment">///就是这里出现了想要找的NonConfigurationInstances</span></div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    <span class="keyword">if</span> (!mInstrumentation.onException(r.activity, e)) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                                <span class="string">"Unable to retain activity "</span></div><div class="line">                                + r.intent.getComponent().toShortString()</div><div class="line">                                + <span class="string">": "</span> + e.toString(), e);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                r.activity.mCalled = <span class="keyword">false</span>;</div><div class="line">                mInstrumentation.callActivityOnDestroy(r.activity);</div><div class="line">...无关代码省略</div><div class="line">        <span class="keyword">return</span> r;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>在performDestroyActivity()调用了Activity.retainNonConfigurationInstances()方法了，所以逻辑切换回Activity中…<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * This method is similar to &#123;<span class="doctag">@link</span> #onRetainNonConfigurationInstance()&#125; except that</div><div class="line"> * it should return either a mapping from  child activity id strings to arbitrary objects,</div><div class="line"> * or null.  This method is intended to be used by Activity framework subclasses that control a</div><div class="line"> * set of child activities, such as ActivityGroup.  The same guarantees and restrictions apply</div><div class="line"> * as for &#123;<span class="doctag">@link</span> #onRetainNonConfigurationInstance()&#125;.  The default implementation returns null.</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function">HashMap&lt;String,Object&gt; <span class="title">onRetainNonConfigurationChildInstances</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">NonConfigurationInstances <span class="title">retainNonConfigurationInstances</span><span class="params">()</span> </span>&#123;</div><div class="line">    Object activity = onRetainNonConfigurationInstance();<span class="comment">///熟悉的代码，原来的配方，和分析ActivityThread之前联系起来了，在Activity中是空实现，这里就是获取子类的NonConfigurationInstance()，之前的例子就是的得FragmentActivity中的具体实现，上文中已经在分析ActivityThread.java已经指出。</span></div><div class="line">    HashMap&lt;String, Object&gt; children = onRetainNonConfigurationChildInstances();</div><div class="line">    FragmentManagerNonConfig fragments = mFragments.retainNestedNonConfig();</div><div class="line"></div><div class="line">    <span class="comment">// We're already stopped but we've been asked to retain.</span></div><div class="line">    <span class="comment">// Our fragments are taken care of but we need to mark the loaders for retention.</span></div><div class="line">    <span class="comment">// In order to do this correctly we need to restart the loaders first before</span></div><div class="line">    <span class="comment">// handing them off to the next activity.</span></div><div class="line">    mFragments.doLoaderStart();</div><div class="line">    mFragments.doLoaderStop(<span class="keyword">true</span>);</div><div class="line">    ArrayMap&lt;String, LoaderManager&gt; loaders = mFragments.retainLoaderNonConfig();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (activity == <span class="keyword">null</span> &amp;&amp; children == <span class="keyword">null</span> &amp;&amp; fragments == <span class="keyword">null</span> &amp;&amp; loaders == <span class="keyword">null</span></div><div class="line">            &amp;&amp; mVoiceInteractor == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    NonConfigurationInstances nci = <span class="keyword">new</span> NonConfigurationInstances();</div><div class="line">    nci.activity = activity;</div><div class="line">    nci.children = children;</div><div class="line">    nci.fragments = fragments;</div><div class="line">    nci.loaders = loaders;</div><div class="line">    <span class="keyword">if</span> (mVoiceInteractor != <span class="keyword">null</span>) &#123;</div><div class="line">        mVoiceInteractor.retainInstance();</div><div class="line">        nci.voiceInteractor = mVoiceInteractor;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> nci;<span class="comment">//这里返回的是Activity中的NonConfigurationInstances就保存在了ActivityClientRecord中了</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>至此，ActivityClientRecord就不再深入了，可以看到在Activity中是以一个ArrayMap来保存Activity的记录，记录的就是Activity的状态，所以这里就实现了对NonConfigurationInstances的保存。</p><hr><p><strong>结语：至此就基本看完了ViewModel在Activity中的使用和原理，在Fragment中的实现主要是使用setRetainInstance(true)的方式去保存，跟今天的分析也有关联，分析源码的过程总是看着就有新的问题，再次带着问题去解决会再次有不同的收获，本文的理解也可能有偏差，如有错误和想要交流的也欢迎指正沟通。</strong>  </p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Jetpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu搭建Nginx图片服务器</title>
      <link href="/post/build-an-image-server/"/>
      <url>/post/build-an-image-server/</url>
      
        <content type="html"><![CDATA[<p>也许算作是建站以来的第一篇真正意义上的总结博客。  </p><p>首先感谢开源本主题的viosey同学和辛苦维护本主题的neoFelhz同学，对此主题极为喜欢。</p><p>新发现了当前的这个Meterial主题后发现居然有一个Gallery模板可以展示照片，平时的博客使用图片需要存放在一个位置上，平时也有一些业余的摄影爱好需要刚好可以存放，当然可以使用如之前使用过的七牛云等云对象存储平台存储使用，我这里也是刚好有个云服务器可以做存储就想着自己搭建一个图片服务器方便管理，也刚好能学习一下服务器方面的一些知识，经多次尝试，故总结一下,话不多说，开始行动.</p><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>Ubuntu版本Ubuntu 16.04.3</p><h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><p>首先是准备编译Nginx的前期准备工作  </p><h2 id="先更新一下源"><a href="#先更新一下源" class="headerlink" title="先更新一下源"></a>先更新一下源</h2><pre><code>&gt; apt-get update</code></pre><h2 id="安装gcc-g-依赖库"><a href="#安装gcc-g-依赖库" class="headerlink" title="安装gcc g++依赖库"></a>安装gcc g++依赖库</h2><pre><code>&gt; apt-get install build-essential&gt; apt-get install libtool</code></pre><h2 id="安装prce依赖库"><a href="#安装prce依赖库" class="headerlink" title="安装prce依赖库"></a>安装prce依赖库</h2><pre><code>&gt; apt-get install libpcre3 libpcre3-dev</code></pre><h2 id="安装-zlib依赖库"><a href="#安装-zlib依赖库" class="headerlink" title="安装 zlib依赖库"></a>安装 zlib依赖库</h2><pre><code>&gt; apt-get install zlib1g-dev</code></pre><h2 id="安装-ssl依赖库"><a href="#安装-ssl依赖库" class="headerlink" title="安装 ssl依赖库"></a>安装 ssl依赖库</h2><pre><code>&gt; apt-get install openssl</code></pre><h2 id="编译Nginx"><a href="#编译Nginx" class="headerlink" title="编译Nginx"></a>编译Nginx</h2><p>下载<a href="http://nginx.org/en/download.html" target="_blank" rel="external">Nginx</a>有对应的版本，我这里下载是当前的最新版本1.13.8</p><pre><code>&gt; #解压下载下来的压缩包&gt; tar -zxvf nginx-1.13.8.tar.gz&gt; #进入解压目录&gt; cd nginx-1.13.8&gt; #配置并生成makefile&gt; ./configure --prefix=/usr/local/nginx &gt; #编译&gt; make&gt; #安装&gt; make install&gt; #启动Nginx&gt; /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code></pre><p>此时Nginx就安装完成了，会使用默认的80端口启动，如果有启动apache2服务的这里会用冲突，这里不是重点，可查询解决，启动完成可直接通过服务器ip或者云解析的域名查看默认网页  </p><p>默认的网页长这个样子<br><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image6.png" alt="Nginx-default-index"></p><h1 id="安装与配置vsftpd"><a href="#安装与配置vsftpd" class="headerlink" title="安装与配置vsftpd"></a>安装与配置vsftpd</h1><h2 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h2><pre><code>&gt; apt-get install vsftpd</code></pre><h2 id="启动vsftpd服务"><a href="#启动vsftpd服务" class="headerlink" title="启动vsftpd服务"></a>启动vsftpd服务</h2><pre><code>&gt;service vsftpd start</code></pre><h2 id="新建ftpuser目录作为ftp主目录-（ftpuser为目录名，随个人喜好创建）"><a href="#新建ftpuser目录作为ftp主目录-（ftpuser为目录名，随个人喜好创建）" class="headerlink" title="新建ftpuser目录作为ftp主目录 （ftpuser为目录名，随个人喜好创建）"></a>新建ftpuser目录作为ftp主目录 （ftpuser为目录名，随个人喜好创建）</h2><pre><code>&gt;mkdir /home/ftpuser</code></pre><h2 id="新建ftpuser用户指定用户主目录和设置用户密码-（ftpuser为用户名，随个人喜好创建）"><a href="#新建ftpuser用户指定用户主目录和设置用户密码-（ftpuser为用户名，随个人喜好创建）" class="headerlink" title="新建ftpuser用户指定用户主目录和设置用户密码 （ftpuser为用户名，随个人喜好创建）"></a>新建ftpuser用户指定用户主目录和设置用户密码 （ftpuser为用户名，随个人喜好创建）</h2><pre><code>&gt;useradd -d /home/ftpuser -s /bin/bash ftpuser&gt;passwd ftpuser</code></pre><h2 id="制定用户组"><a href="#制定用户组" class="headerlink" title="制定用户组"></a>制定用户组</h2><pre><code>&gt;chown ftpuser:ftpuser /home/ftpuser</code></pre><h2 id="新建文件-etc-vsftpd-user-list，用于存放允许访问ftp的用户"><a href="#新建文件-etc-vsftpd-user-list，用于存放允许访问ftp的用户" class="headerlink" title="新建文件/etc/vsftpd.user_list，用于存放允许访问ftp的用户"></a>新建文件/etc/vsftpd.user_list，用于存放允许访问ftp的用户</h2><pre><code>&gt;vim /etc/vsftpd.user_list</code></pre><div class="article-img"><p><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image7.png" alt="ftp-user_list"></p></div><h2 id="编辑vsftpd配置文件"><a href="#编辑vsftpd配置文件" class="headerlink" title="编辑vsftpd配置文件"></a>编辑vsftpd配置文件</h2><pre><code>&gt;vim /etc/vsftpd.conf做如下修改：   　　打开注释 write_enable=YES   　　添加信息 userlist_file=/etc/vsftpd.user_list   　　添加信息 userlist_enable=YES   　　添加信息 userlist_deny=NO 　　修改完成后保存退出。</code></pre><h2 id="重启vsftpd服务"><a href="#重启vsftpd服务" class="headerlink" title="重启vsftpd服务"></a>重启vsftpd服务</h2><pre><code>&gt;service vsftpd restart</code></pre><p>这是可以使用filezilla等ftp软件使用刚刚新建的用户名和密码访问测试是否成功</p><p>OK，准备工作完成开始上传图片，开始正式图片服务器工作</p><h2 id="创建存储图片的根目录-（在ftpuser目录下-我这里使用www-images）"><a href="#创建存储图片的根目录-（在ftpuser目录下-我这里使用www-images）" class="headerlink" title="创建存储图片的根目录 （在ftpuser目录下,我这里使用www/images）"></a>创建存储图片的根目录 （在ftpuser目录下,我这里使用www/images）</h2><pre><code>&gt;cd /home/ftpuser&gt;mkdir -p www/images</code></pre><h2 id="在nginx目录下创建images目录"><a href="#在nginx目录下创建images目录" class="headerlink" title="在nginx目录下创建images目录"></a>在nginx目录下创建images目录</h2><pre><code>&gt;mkdir /usr/local/nginx/html/images</code></pre><h2 id="修改nginx-conf-nginx-conf在默认的server里再添加一个location并指定实际路径"><a href="#修改nginx-conf-nginx-conf在默认的server里再添加一个location并指定实际路径" class="headerlink" title="修改nginx/conf/nginx.conf在默认的server里再添加一个location并指定实际路径:"></a>修改nginx/conf/nginx.conf在默认的server里再添加一个location并指定实际路径:</h2><pre><code>location /images/ {    root  /home/ftpuser/www/;    autoindex on;}  </code></pre><div class="article-img"><p><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image8.png" alt="images_nginx_conf"></p></div><h2 id="修改用户访问权限"><a href="#修改用户访问权限" class="headerlink" title="修改用户访问权限"></a>修改用户访问权限</h2><pre><code>&gt;chmod 755 /home/ftpuser/www/images</code></pre><p>使用filezilla 等ftp工具使用ftpuser用户登录即可上传图片</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image9.png" alt="ftp_upload_test"><br>送上一张最近的长安街慢门效果照片<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em>。大功告成！ 撒花！<br><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image10.png" alt="image_test_result"></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Studio import project 出现Error错误 程序包org.apache.http不存在</title>
      <link href="/post/Android-Studio-Error-2/"/>
      <url>/post/Android-Studio-Error-2/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>遇到新的产品形态、样式需求我们经常会在Github搜索开源项目，有些项目是早期Android版本中开发而成，后续Google会有部分API在新版本中的SDK放弃集成，这次我导入一个项目时就遇到这样一个错误</p><div class="article-img"><p><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image4.png" alt="Error Imag"></p></div><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>如果经历过Android 4.4 时期的同学应该会觉得org.apache.http这个包很熟悉，这里显示错误是因为在targetsdk：23以上版本SDK中已经不再集成此包，如需使用可添加useLibrary “org.apache.http.legacy”依赖即可 。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></div><div class="line">android &#123;</div><div class="line">   compileSdkVersion <span class="number">23</span></div><div class="line">    buildToolsVersion <span class="string">"23.0.3"</span></div><div class="line">    useLibrary <span class="string">"org.apache.http.legacy"</span></div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 错误志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> IDEError </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RecyclerView排雷--notifyItemRemoved下标（position）不能更新</title>
      <link href="/post/RecyclerView-clear-of-mines-1/"/>
      <url>/post/RecyclerView-clear-of-mines-1/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>用以显示列表类型的UI我们经常使用ListView，GridView，Google推出RecyclerView之后，大部分的使用均转换到了RecyclerView中，可定制化十分强，但是使用过程中难免碰到一些问题，以前使用ListView多是使用notifyDataSetChanged（）更新数据，使用RecyclerView删除时，为了使用其自身的删除过渡动画使用notifyItemRemoved删除，那么就碰到了一个问题，再onBindViewHolder中设置了setTag（position）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder,<span class="keyword">int</span> position)</span></span>&#123;</div><div class="line">...</div><div class="line">holder.itemView.setTag(position)</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>直接使用notifyItemRemoved(posiaon)删除会导致该下标不能更新就导致一系列的Bug（/衰）</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>查询到了解决办法特此记录一下:为了修复该问题删除之后需要调用notifyItenRangeChanged方法，使下面的itemview重新onBind:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteItem</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</div><div class="line">  mDataList.remove(position);</div><div class="line">  notifyItemRemoved(position);</div><div class="line">  <span class="keyword">if</span>(position != mDataList.size())&#123; <span class="comment">// 如果移除的是最后一个，忽略</span></div><div class="line">      notifyItemRangeChanged(position, mDataList.size() - position);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果不需要使用动画或更改自定义的动画效果可以添加一下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mRecyclerView.setItemAnimator(newDefaultItemAnimator());</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android Studio 更新后出现Error:No service of type Factory  available in ProjectScopeServices.解决办法</title>
      <link href="/post/Android-Studio-Error-1/"/>
      <url>/post/Android-Studio-Error-1/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>今天更新Android Studio后 之前能运行的项目出现错误:<br><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image1.png" alt=""></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>查找到解决方案在此记录一下：<br>是github的 自动化打包插件maven 版本需要更新导致<br><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image2.png" alt=""><br><img src="https://ncmon-blog.oss-cn-beijing.aliyuncs.com/image3.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 错误志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> IDEError </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
