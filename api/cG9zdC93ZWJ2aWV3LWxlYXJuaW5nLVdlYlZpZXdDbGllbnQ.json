{"title":"Android WebView必知必会(1)-WebViewClient","date":"2019-02-23T06:27:48.000Z","slug":"webview-learning-WebViewClient","comments":true,"tags":["Android","WebView"],"categories":["技术栈"],"updated":"2019-03-20T14:37:20.444Z","content":"<p>项目中遇到了混合开发怎么办，不需要慌，Android提供的WebView已经非常强大，可以和前端同学配合好完成非常多的事情。配合之前呢就需要对WebView做一个全面的了解，看看WebView能做些什么，又怎么去做这些事情，又会遇到哪些问题。</p>\n<h2 id=\"WebView简介\"><a href=\"#WebView简介\" class=\"headerlink\" title=\"WebView简介\"></a>WebView简介</h2><p>从Android4.4系统开始，Chromium内核取代了Webkit内核，正式地接管了WebView的渲染工作。Chromium是一个开源的浏览器内核项目，基于Chromium开源项目修改实现的浏览器非常多，包括最著名的Chrome浏览器，以及一众国内浏览器（360浏览器、QQ浏览器等）。其中Chromium在Android上面的实现是<code>Android System WebView</code>。</p>\n<a id=\"more\"></a>\n<p>从Android5.0系统开始，WebView移植成了一个独立的apk，可以不依赖系统而独立存在和更新，我们可以在<code>系统-&gt;设置-&gt;Android System WebView</code>看到WebView的当前版本。</p>\n<p>从Android7.0系统开始，如果系统安装了Chrome (version&gt;51)，那么Chrome将会直接为应用的WebView提供渲染，WebView版本会随着Chrome的更新而更新，用户也可以选择WebView的服务提供方（在开发者选项-&gt;WebView Implementation里），WebView可以脱离应用，在一个独立的沙盒进程中渲染页面（需要在开发者选项里打开）。</p>\n<p>从Android8.0系统开始，默认开启WebView多进程模式，即WebView运行在独立的沙盒进程中。</p>\n<h2 id=\"WebViewClient\"><a href=\"#WebViewClient\" class=\"headerlink\" title=\"WebViewClient\"></a>WebViewClient</h2><h3 id=\"抛砖\"><a href=\"#抛砖\" class=\"headerlink\" title=\"抛砖\"></a>抛砖</h3><p>WebView加载在线网页必备，如果不设置，会直接跳转打开浏览器应用加载网页！同时包含很多有用的回调函数。</p>\n<p>举一个小栗子：</p>\n<p>通常加载一个网页都需要一定的时间，这时候就需要一个loading友好提示一下用户，正在加载，加载完成后隐藏它。这个怎么实现呢，就需要用到WebViewClient了，WebViewClient包含了很多网页加载需要用到的回调。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">mWebView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient()&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPageStarted(view, url, favicon);</div><div class=\"line\">        Log.d(TAG,<span class=\"string\">\"onPageStarted\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">        Log.d(TAG,<span class=\"string\">\"onPageFinished\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>WebView.setWebViewClient方法设置WebViewClient回调，重写了两个方法，onPageStarted会在加载网页时调用，onPageFinished就代表加载完成了。利用这两个方法就能完成loading的控制。在onPageFinished中也可以通过WebView.getTitle（）可获得当前网页加载完时的title(这里指Html文件中head中的title)等，当然对某些网页时不准的，因为网页中可能会通过JS代码动态的修改title,这个操作是在onPageFinish()之后进行的，这个title在另外的函数可以获取到，总结WebChromeClient的时候会讲到。</p>\n<h3 id=\"常用函数简介\"><a href=\"#常用函数简介\" class=\"headerlink\" title=\"常用函数简介\"></a>常用函数简介</h3><p>不一定全都会用到，先学习一下，以备不时之需，会挑几个非常常用的总结下使用场景。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 在开始加载网页时会回调</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 在结束加载网页时会回调</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 拦截 url 跳转,在里边添加点击链接跳转或者操作</div><div class=\"line\"> */</div><div class=\"line\">@Deprecated</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span></div><div class=\"line\"><span class=\"comment\">//sdk&gt;=24    </span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, WebResourceRequest request)</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 在每一次请求资源时，都会通过这个函数来回调,请求资源的主机应用程序允许应用程序返回数据，如果该方法返回</div><div class=\"line\"> * null，WebView将会按照平常一样继续加载；否则，返回的内容将会被使用。该方法在独立线程而非UI线程中回</div><div class=\"line\"> * 调，因此访问私有数据或系统视图时应该谨慎行事。</div><div class=\"line\"> */</div><div class=\"line\">@Deprecated</div><div class=\"line\"><span class=\"keyword\">public</span> WebResourceResponse <span class=\"title\">shouldInterceptRequest</span><span class=\"params\">(WebView view,String url)</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WebResourceResponse <span class=\"title\">shouldInterceptRequest</span><span class=\"params\">(WebView view,WebResourceRequest request)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> shouldInterceptRequest(view, request.getUrl().toString());</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *加载资源完成（与shouldInterceptRequest对应）</div><div class=\"line\"> */</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadResource</span><span class=\"params\">(WebView view, String url)</span> </span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 加载错误的时候会回调，在其中可做错误处理，比如再请求加载一次，或者提示自定义的网路问题页面</div><div class=\"line\"> */</div><div class=\"line\">@Deprecated</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> errorCode,String description, String failingUrl)</span></div><div class=\"line\"><span class=\"comment\">//sdk&gt;=23 </span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, WebResourceRequest request, WebResourceError error)</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 当接收到https错误时，会回调此函数，在其中可以做错误处理</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedSslError</span><span class=\"params\">(WebView view, SslErrorHandler handler,SslError error)</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 回调该方法，处理SSL认证请求</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedClientCertRequest</span><span class=\"params\">(WebView view, ClientCertRequest request)</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 页面大小改变后回调该方法，获取缩放前后大小</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScaleChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">float</span> oldScale, <span class=\"keyword\">float</span> newScale)</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 更新历史记录</div><div class=\"line\"> * @param isReload 代表Url是重新载入的</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doUpdateVisitedHistory</span><span class=\"params\">(WebView view, String url, <span class=\"keyword\">boolean</span> isReload)</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 账户自动登录</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedLoginRequest</span><span class=\"params\">(WebView view, String realm,String account, String args)</span> </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 通知主程序输入事件不是由WebView调用。是否让主程序处理WebView未处理的Input Event。</div><div class=\"line\"> * 除了系统按键，WebView总是消耗掉输入事件或shouldOverrideKeyEvent返回true。</div><div class=\"line\"> * 该方法由event 分发异步调用。注意：如果事件为MotionEvent，则事件的生命周期只存在方法调用过程中，</div><div class=\"line\"> * 如果WebViewClient想要使用这个Event，则需要复制Event对象。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"title\">onUnhandledInputEvent</span><span class=\"params\">(WebView view, InputEvent event)</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 如果浏览器需要重新发送POST请求，可以通过这个时机来处理。默认是不重新发送数据。 参数说明</div><div class=\"line\"> * @param dontResend 浏览器不需要重新发送的参数</div><div class=\"line\"> * @param resend浏览器需要重新发送的参数</div><div class=\"line\"> */</div><div class=\"line\">@Override</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFormResubmission</span><span class=\"params\">(WebView view, Message dontResend,Message resend)</span>！</div></pre></td></tr></table></figure>\n<h4 id=\"shouldOverrideUrlLoading\"><a href=\"#shouldOverrideUrlLoading\" class=\"headerlink\" title=\"shouldOverrideUrlLoading\"></a>shouldOverrideUrlLoading</h4><p>非常重要的方法，第一个就需要说明，重定向，超链接都会用的方法，这个函数在加载超链接时会回调，由于这个函数是在加载Url之前调用，返回值true代表拦截处理就不再继续加载了，返回false则继续加载，所以如果需要做一些白名单黑名单操作可以在这里处理它们。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>默认既返回false。所以如果没有其他设置需求可以采用设置一个默认的WebViewClient既能保持正常加载网页。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mWebView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient());</div></pre></td></tr></table></figure>\n<p>有重载方法，在SDK&gt;=24调用，所以如果需要处理，需要两个函数都重写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, WebResourceRequest request)</span></span></div></pre></td></tr></table></figure>\n<h4 id=\"onReceivedError\"><a href=\"#onReceivedError\" class=\"headerlink\" title=\"onReceivedError\"></a>onReceivedError</h4><p>接收网络错误，典型使用场景是加载404页面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//如果是主frame的话就执行方法，要是在其他比如iframes就会不执行</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (request.isForMainFrame()) &#123;</div><div class=\"line\">\t\tonReceivedError(view,error.getErrorCode(), rror.getDescription().toString(),request.getUrl().toString());</div><div class=\"line\">\t&#125;</div><div class=\"line\">    <span class=\"comment\">//处理加载本地错误页面</span></div><div class=\"line\">    mWebView.loadUrl(<span class=\"string\">\"file:///android_asset/http_error.html\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>WebResourceError包含了错误信息,其中的ErrorCode对应WebViewClient中的常量ERROR_*可以做对应处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebResourceError</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">getErrorCode</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> CharSequence <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"meta\">@SystemApi</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WebResourceError</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"onReceivedSslError\"><a href=\"#onReceivedSslError\" class=\"headerlink\" title=\"onReceivedSslError\"></a>onReceivedSslError</h4><p>很多帖子都介绍了这个方法，顾名思义与处理SSL错误有关，也就是处理https的请求时验证出错，看到的很多例子都是以以前的12306网站为例，以前的12306是自签名证书，所以用chrome打开时会出现警告，如果用WebView加载这里就会回调onReceivedSslError函数，笔者写这篇笔记时12306已经是公共证书了，也就没有这个错误验证了。暂时使用自己的理解介绍一下，以后发现可用网站再验证：</p>\n<p>该函数的默认实现为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedSslError</span><span class=\"params\">(WebView view, SslErrorHandler handler,SslError error)</span> </span>&#123;</div><div class=\"line\">\thandler.cancel();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>SslErrorHandler.cancel()就是结束了Ssl处理，也就不会继续加载了，这里子类可以重写处理逻辑为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedSslError</span><span class=\"params\">(WebView view, SslErrorHandler handler,SslError error)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//super.onReceivedSslError(view, handler, error);</span></div><div class=\"line\">\thandler.proceed();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>改变了SslErrorHandler的处理，使其能继续验证证书，正常打开该网页。</p>\n<p><code>需要注意的是如果有回调了onReceivedSslError，是不会同时回调onReceivedError的</code></p>\n<p>WebViewClient还有很多没有介绍到的方法，有机会还是找一些应用场景试验下再行补充，这篇文章先到这里吧，之后再总结下常用设置和WebChromeClient相关。</p>\n","prev":{"title":"Android WebView必知必会(2)-WebSettings","slug":"webview-learning-WebSettings"},"next":{"title":"微博登陆，QQ登录错误码","slug":"threee-way-login-errorcode"},"link":"http://ncmon.com/post/webview-learning-WebViewClient/","toc":[{"title":"WebView简介","id":"WebView简介","index":"1"},{"title":"WebViewClient","id":"WebViewClient","index":"2","children":[{"title":"抛砖","id":"抛砖","index":"2.1"},{"title":"常用函数简介","id":"常用函数简介","index":"2.2","children":[{"title":"shouldOverrideUrlLoading","id":"shouldOverrideUrlLoading","index":"2.2.1"},{"title":"onReceivedError","id":"onReceivedError","index":"2.2.2"},{"title":"onReceivedSslError","id":"onReceivedSslError","index":"2.2.3"}]}]}],"copyright":{"author":"ncmon","link":"<a href=\"http://ncmon.com/post/webview-learning-WebViewClient/\" title=\"Android WebView必知必会(1)-WebViewClient\">http://ncmon.com/post/webview-learning-WebViewClient/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reward":true}