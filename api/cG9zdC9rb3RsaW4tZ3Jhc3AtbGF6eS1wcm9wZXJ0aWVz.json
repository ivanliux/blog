{"title":"Kotlin学习笔记-延迟属性by lazy、lateinit、Delegates.notNull","date":"2020-03-24T15:24:57.000Z","slug":"kotlin-grasp-lazy-properties","comments":true,"tags":["Android","Kotlin"],"categories":["技术栈"],"updated":"2020-03-26T17:28:26.172Z","content":"<p>​    在Kotlin开发中与Java不同的是在定义和声明属性时必须要做好初始化工作，否则编译器会提示报错的，这也是包括我在内的很多同学接触Kotlin最先听到的一个特点：类型安全，能很有效避免Java中的很多空指针异常。  </p>\n<p>​    但是有时候我们不需要变量在类对象初始化的时候就必须有值，或者变量的真实值需要根据某些其他条件再进行赋值，虽然可以指定一个默认值后续再修改，但是实际上这步默认赋值是无意义的，在Kotlin种，是可以延迟初始化的，有以下几种方法，在此记录。</p>\n<h2 id=\"by-lazy\"><a href=\"#by-lazy\" class=\"headerlink\" title=\"by lazy\"></a>by lazy</h2><h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(<span class=\"keyword\">val</span> age:<span class=\"built_in\">Int</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> adult:<span class=\"built_in\">Boolean</span> <span class=\"keyword\">by</span> lazy &#123;</div><div class=\"line\">        age &gt;= <span class=\"number\">18</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li><p>该变量必须是引用不可变的，即只能使用val声明，不能用var声明变量。</p>\n</li>\n<li><p>可以接受一个Lambda表达式作为参数，首次调用会执行Lambda表达式并返回执行后的结果，再次调用会直接返回之前的结果。</p>\n</li>\n</ol>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>lazy还有两个重载方法</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> actual <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">lazy</span><span class=\"params\">(mode: <span class=\"type\">LazyThreadSafetyMode</span>, initializer: ()</span></span> -&gt; T): Lazy&lt;T&gt; =</div><div class=\"line\">    <span class=\"keyword\">when</span> (mode) &#123;</div><div class=\"line\">        LazyThreadSafetyMode.SYNCHRONIZED -&gt; SynchronizedLazyImpl(initializer)</div><div class=\"line\">        LazyThreadSafetyMode.PUBLICATION -&gt; SafePublicationLazyImpl(initializer)</div><div class=\"line\">        LazyThreadSafetyMode.NONE -&gt; UnsafeLazyImpl(initializer)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>默认情况下，对于 <code>lazy</code> 属性的求值是同步锁的（synchronized），也可通过传递LazyThreadSafetyMode来改变lazy的线程安全实现</p>\n<ul>\n<li>LazyThreadSafetyMode.SYNCHRONIZED 与默认实现相同，使用锁来确保只有一个线程可以在线程安全的方式下初始化Lambda方法</li>\n<li>LazyThreadSafetyMode.PUBLICATION  当多个线程尝试同时初始化值时，允许所有线程都运行初始化Lambda方法</li>\n<li>LazyThreadSafetyMode.NONE 不会有任何线程安全的保证和相关的开销</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> actual <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">lazy</span><span class=\"params\">(lock: <span class=\"type\">Any</span>?, initializer: ()</span></span> -&gt; T): Lazy&lt;T&gt; = SynchronizedLazyImpl(initializer, lock)</div></pre></td></tr></table></figure>\n<p>也是采用默认实现，lock参数可指定synchornized的锁对象</p>\n<h2 id=\"lateinit\"><a href=\"#lateinit\" class=\"headerlink\" title=\"lateinit\"></a>lateinit</h2><h3 id=\"示例代码-1\"><a href=\"#示例代码-1\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(<span class=\"keyword\">val</span> age:<span class=\"built_in\">Int</span>)&#123;</div><div class=\"line\">    lateinit <span class=\"keyword\">var</span> adult:java.lang.<span class=\"built_in\">Boolean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printAdult</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        adult = java.lang.<span class=\"built_in\">Boolean</span>(age &gt;= <span class=\"number\">18</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>该变量必须是引用可变的，即只能使用var声明</li>\n<li>不支持基本数据类型，如Int,long，只能使用Integer这种包装类来替代</li>\n<li>必须在使用之前进行初始化，否则会抛出异常kotlin.UninitializedPropertyAccessException</li>\n</ol>\n<h2 id=\"Delegates-notNull\"><a href=\"#Delegates-notNull\" class=\"headerlink\" title=\"Delegates.notNull\"></a>Delegates.notNull<t></t></h2><p>那么可不可以使用var的情况下也使用基本数据类型延迟初始化呢，也可以，就是用到了Delegates.notNull<t>了，这个在Kotlin中叫做属性代理。</t></p>\n<h3 id=\"示例代码-2\"><a href=\"#示例代码-2\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> age <span class=\"keyword\">by</span> Delegates.notNull&lt;<span class=\"built_in\">Int</span>&gt;()</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    age = <span class=\"number\">18</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>该变量必须是引用可变的，即只能使用var声明</li>\n<li>必须在使用之前进行初始化，否则会抛出异常IllageStateException</li>\n<li>不支持外部注入工具将它直接注入到Java字段中</li>\n</ol>\n","next":{"title":"关于getDeviceId和getImei获取值不同的分析","slug":"android-get-imei"},"link":"http://ncmon.com/post/kotlin-grasp-lazy-properties/","toc":[{"title":"by lazy","id":"by-lazy","index":"1","children":[{"title":"示例代码","id":"示例代码","index":"1.1"},{"title":"特点","id":"特点","index":"1.2"},{"title":"扩展","id":"扩展","index":"1.3"}]},{"title":"lateinit","id":"lateinit","index":"2","children":[{"title":"示例代码","id":"示例代码-1","index":"2.1"},{"title":"特点","id":"特点-1","index":"2.2"}]},{"title":"Delegates.notNull<t></t>","id":"Delegates-notNull","index":"3","children":[{"title":"示例代码","id":"示例代码-2","index":"3.1"},{"title":"特点","id":"特点-2","index":"3.2"}]}],"copyright":{"author":"ncmon","link":"<a href=\"http://ncmon.com/post/kotlin-grasp-lazy-properties/\" title=\"Kotlin学习笔记-延迟属性by lazy、lateinit、Delegates.notNull\">http://ncmon.com/post/kotlin-grasp-lazy-properties/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reward":true}